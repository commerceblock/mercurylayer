// This file was autogenerated by some hot garbage in the `uniffi` crate.
// Trust me, you don't want to mess with it!

@file:Suppress("NAME_SHADOWING")


// Common helper code.
//
// Ideally this would live in a separate .kt file where it can be unittested etc
// in isolation, and perhaps even published as a re-useable package.
//
// However, it's important that the details of how this helper code works (e.g. the
// way that different builtin types are passed across the FFI) exactly match what's
// expected by the Rust code on the other side of the interface. In practice right
// now that means coming from the exact some version of `uniffi` that was used to
// compile the Rust component. The easiest way to ensure this is to bundle the Kotlin
// helpers directly inline like we're doing here.

import com.sun.jna.Callback
import com.sun.jna.Library
import com.sun.jna.Native
import com.sun.jna.Pointer
import com.sun.jna.Structure
import com.sun.jna.ptr.*
import kotlinx.serialization.Serializable
import kotlinx.serialization.SerialName
import java.nio.ByteBuffer
import java.nio.ByteOrder
import java.nio.CharBuffer
import java.nio.charset.CodingErrorAction
import java.util.concurrent.ConcurrentHashMap
import java.util.concurrent.atomic.AtomicLong

// This is a helper for safely working with byte buffers returned from the Rust code.
// A rust-owned buffer is represented by its capacity, its current length, and a
// pointer to the underlying data.

@Structure.FieldOrder("capacity", "len", "data")
open class RustBuffer : Structure() {
    // Note: `capacity` and `len` are actually `ULong` values, but JVM only supports signed values.
    // When dealing with these fields, make sure to call `toULong()`.
    @JvmField var capacity: Long = 0

    @JvmField var len: Long = 0

    @JvmField var data: Pointer? = null

    class ByValue : RustBuffer(), Structure.ByValue

    class ByReference : RustBuffer(), Structure.ByReference

    internal fun setValue(other: RustBuffer) {
        capacity = other.capacity
        len = other.len
        data = other.data
    }

    companion object {
        internal fun alloc(size: ULong = 0UL) =
            uniffiRustCall { status ->
                // Note: need to convert the size to a `Long` value to make this work with JVM.
                UniffiLib.INSTANCE.ffi_mercurylib_rustbuffer_alloc(size.toLong(), status)
            }.also {
                if (it.data == null) {
                    throw RuntimeException("RustBuffer.alloc() returned null data pointer (size=$size)")
                }
            }

        internal fun create(
            capacity: ULong,
            len: ULong,
            data: Pointer?,
        ): RustBuffer.ByValue {
            var buf = RustBuffer.ByValue()
            buf.capacity = capacity.toLong()
            buf.len = len.toLong()
            buf.data = data
            return buf
        }

        internal fun free(buf: RustBuffer.ByValue) =
            uniffiRustCall { status ->
                UniffiLib.INSTANCE.ffi_mercurylib_rustbuffer_free(buf, status)
            }
    }

    @Suppress("TooGenericExceptionThrown")
    fun asByteBuffer() =
        this.data?.getByteBuffer(0, this.len.toLong())?.also {
            it.order(ByteOrder.BIG_ENDIAN)
        }
}

/**
 * The equivalent of the `*mut RustBuffer` type.
 * Required for callbacks taking in an out pointer.
 *
 * Size is the sum of all values in the struct.
 */
class RustBufferByReference : ByReference(16) {
    /**
     * Set the pointed-to `RustBuffer` to the given value.
     */
    fun setValue(value: RustBuffer.ByValue) {
        // NOTE: The offsets are as they are in the C-like struct.
        val pointer = getPointer()
        pointer.setLong(0, value.capacity)
        pointer.setLong(8, value.len)
        pointer.setPointer(16, value.data)
    }

    /**
     * Get a `RustBuffer.ByValue` from this reference.
     */
    fun getValue(): RustBuffer.ByValue {
        val pointer = getPointer()
        val value = RustBuffer.ByValue()
        value.writeField("capacity", pointer.getLong(0))
        value.writeField("len", pointer.getLong(8))
        value.writeField("data", pointer.getLong(16))

        return value
    }
}

// This is a helper for safely passing byte references into the rust code.
// It's not actually used at the moment, because there aren't many things that you
// can take a direct pointer to in the JVM, and if we're going to copy something
// then we might as well copy it into a `RustBuffer`. But it's here for API
// completeness.

@Structure.FieldOrder("len", "data")
open class ForeignBytes : Structure() {
    @JvmField var len: Int = 0

    @JvmField var data: Pointer? = null

    class ByValue : ForeignBytes(), Structure.ByValue
}

// The FfiConverter interface handles converter types to and from the FFI
//
// All implementing objects should be public to support external types.  When a
// type is external we need to import it's FfiConverter.
public interface FfiConverter<KotlinType, FfiType> {
    // Convert an FFI type to a Kotlin type
    fun lift(value: FfiType): KotlinType

    // Convert an Kotlin type to an FFI type
    fun lower(value: KotlinType): FfiType

    // Read a Kotlin type from a `ByteBuffer`
    fun read(buf: ByteBuffer): KotlinType

    // Calculate bytes to allocate when creating a `RustBuffer`
    //
    // This must return at least as many bytes as the write() function will
    // write. It can return more bytes than needed, for example when writing
    // Strings we can't know the exact bytes needed until we the UTF-8
    // encoding, so we pessimistically allocate the largest size possible (3
    // bytes per codepoint).  Allocating extra bytes is not really a big deal
    // because the `RustBuffer` is short-lived.
    fun allocationSize(value: KotlinType): ULong

    // Write a Kotlin type to a `ByteBuffer`
    fun write(
        value: KotlinType,
        buf: ByteBuffer,
    )

    // Lower a value into a `RustBuffer`
    //
    // This method lowers a value into a `RustBuffer` rather than the normal
    // FfiType.  It's used by the callback interface code.  Callback interface
    // returns are always serialized into a `RustBuffer` regardless of their
    // normal FFI type.
    fun lowerIntoRustBuffer(value: KotlinType): RustBuffer.ByValue {
        val rbuf = RustBuffer.alloc(allocationSize(value))
        try {
            val bbuf =
                rbuf.data!!.getByteBuffer(0, rbuf.capacity).also {
                    it.order(ByteOrder.BIG_ENDIAN)
                }
            write(value, bbuf)
            rbuf.writeField("len", bbuf.position().toLong())
            return rbuf
        } catch (e: Throwable) {
            RustBuffer.free(rbuf)
            throw e
        }
    }

    // Lift a value from a `RustBuffer`.
    //
    // This here mostly because of the symmetry with `lowerIntoRustBuffer()`.
    // It's currently only used by the `FfiConverterRustBuffer` class below.
    fun liftFromRustBuffer(rbuf: RustBuffer.ByValue): KotlinType {
        val byteBuf = rbuf.asByteBuffer()!!
        try {
            val item = read(byteBuf)
            if (byteBuf.hasRemaining()) {
                throw RuntimeException("junk remaining in buffer after lifting, something is very wrong!!")
            }
            return item
        } finally {
            RustBuffer.free(rbuf)
        }
    }
}

// FfiConverter that uses `RustBuffer` as the FfiType
public interface FfiConverterRustBuffer<KotlinType> : FfiConverter<KotlinType, RustBuffer.ByValue> {
    override fun lift(value: RustBuffer.ByValue) = liftFromRustBuffer(value)

    override fun lower(value: KotlinType) = lowerIntoRustBuffer(value)
}
// A handful of classes and functions to support the generated data structures.
// This would be a good candidate for isolating in its own ffi-support lib.

internal const val UNIFFI_CALL_SUCCESS = 0.toByte()
internal const val UNIFFI_CALL_ERROR = 1.toByte()
internal const val UNIFFI_CALL_UNEXPECTED_ERROR = 2.toByte()

@Structure.FieldOrder("code", "error_buf")
internal open class UniffiRustCallStatus : Structure() {
    @JvmField var code: Byte = 0

    @JvmField var error_buf: RustBuffer.ByValue = RustBuffer.ByValue()

    class ByValue : UniffiRustCallStatus(), Structure.ByValue

    fun isSuccess(): Boolean {
        return code == UNIFFI_CALL_SUCCESS
    }

    fun isError(): Boolean {
        return code == UNIFFI_CALL_ERROR
    }

    fun isPanic(): Boolean {
        return code == UNIFFI_CALL_UNEXPECTED_ERROR
    }

    companion object {
        fun create(
            code: Byte,
            errorBuf: RustBuffer.ByValue,
        ): UniffiRustCallStatus.ByValue {
            val callStatus = UniffiRustCallStatus.ByValue()
            callStatus.code = code
            callStatus.error_buf = errorBuf
            return callStatus
        }
    }
}

class InternalException(message: String) : Exception(message)

// Each top-level error class has a companion object that can lift the error from the call status's rust buffer
interface UniffiRustCallStatusErrorHandler<E> {
    fun lift(error_buf: RustBuffer.ByValue): E
}

// Helpers for calling Rust
// In practice we usually need to be synchronized to call this safely, so it doesn't
// synchronize itself

// Call a rust function that returns a Result<>.  Pass in the Error class companion that corresponds to the Err
private inline fun <U, E : Exception> uniffiRustCallWithError(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    callback: (UniffiRustCallStatus) -> U,
): U {
    var status = UniffiRustCallStatus()
    val return_value = callback(status)
    uniffiCheckCallStatus(errorHandler, status)
    return return_value
}

// Check UniffiRustCallStatus and throw an error if the call wasn't successful
private fun <E : Exception> uniffiCheckCallStatus(
    errorHandler: UniffiRustCallStatusErrorHandler<E>,
    status: UniffiRustCallStatus,
) {
    if (status.isSuccess()) {
        return
    } else if (status.isError()) {
        throw errorHandler.lift(status.error_buf)
    } else if (status.isPanic()) {
        // when the rust code sees a panic, it tries to construct a rustbuffer
        // with the message.  but if that code panics, then it just sends back
        // an empty buffer.
        if (status.error_buf.len > 0) {
            throw InternalException(FfiConverterString.lift(status.error_buf))
        } else {
            throw InternalException("Rust panic")
        }
    } else {
        throw InternalException("Unknown rust call status: $status.code")
    }
}

// UniffiRustCallStatusErrorHandler implementation for times when we don't expect a CALL_ERROR
object UniffiNullRustCallStatusErrorHandler : UniffiRustCallStatusErrorHandler<InternalException> {
    override fun lift(error_buf: RustBuffer.ByValue): InternalException {
        RustBuffer.free(error_buf)
        return InternalException("Unexpected CALL_ERROR")
    }
}

// Call a rust function that returns a plain value
private inline fun <U> uniffiRustCall(callback: (UniffiRustCallStatus) -> U): U {
    return uniffiRustCallWithError(UniffiNullRustCallStatusErrorHandler, callback)
}

internal inline fun <T> uniffiTraitInterfaceCall(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
) {
    try {
        writeReturn(makeCall())
    } catch (e: Exception) {
        callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
        callStatus.error_buf = FfiConverterString.lower(e.toString())
    }
}

internal inline fun <T, reified E : Throwable> uniffiTraitInterfaceCallWithError(
    callStatus: UniffiRustCallStatus,
    makeCall: () -> T,
    writeReturn: (T) -> Unit,
    lowerError: (E) -> RustBuffer.ByValue,
) {
    try {
        writeReturn(makeCall())
    } catch (e: Exception) {
        if (e is E) {
            callStatus.code = UNIFFI_CALL_ERROR
            callStatus.error_buf = lowerError(e)
        } else {
            callStatus.code = UNIFFI_CALL_UNEXPECTED_ERROR
            callStatus.error_buf = FfiConverterString.lower(e.toString())
        }
    }
}

// Map handles to objects
//
// This is used pass an opaque 64-bit handle representing a foreign object to the Rust code.
internal class UniffiHandleMap<T : Any> {
    private val map = ConcurrentHashMap<Long, T>()
    private val counter = java.util.concurrent.atomic.AtomicLong(0)

    val size: Int
        get() = map.size

    // Insert a new object into the handle map and get a handle for it
    fun insert(obj: T): Long {
        val handle = counter.getAndAdd(1)
        map.put(handle, obj)
        return handle
    }

    // Get an object from the handle map
    fun get(handle: Long): T {
        return map.get(handle) ?: throw InternalException("UniffiHandleMap.get: Invalid handle")
    }

    // Remove an entry from the handlemap and get the Kotlin object back
    fun remove(handle: Long): T {
        return map.remove(handle) ?: throw InternalException("UniffiHandleMap: Invalid handle")
    }
}

// Contains loading, initialization code,
// and the FFI Function declarations in a com.sun.jna.Library.
@Synchronized
private fun findLibraryName(componentName: String): String {
    val libOverride = System.getProperty("uniffi.component.$componentName.libraryOverride")
    if (libOverride != null) {
        return libOverride
    }
    return "mercurylib"
}

private inline fun <reified Lib : Library> loadIndirect(componentName: String): Lib {
    return Native.load<Lib>(findLibraryName(componentName), Lib::class.java)
}

// Define FFI callback types
internal interface UniffiRustFutureContinuationCallback : com.sun.jna.Callback {
    fun callback(
        `data`: Long,
        `pollResult`: Byte,
    )
}

internal interface UniffiForeignFutureFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

internal interface UniffiCallbackInterfaceFree : com.sun.jna.Callback {
    fun callback(`handle`: Long)
}

@Structure.FieldOrder("handle", "free")
internal open class UniffiForeignFuture(
    @JvmField internal var `handle`: Long = 0.toLong(),
    @JvmField internal var `free`: UniffiForeignFutureFree? = null,
) : Structure() {
    class UniffiByValue(
        `handle`: Long = 0.toLong(),
        `free`: UniffiForeignFutureFree? = null,
    ) : UniffiForeignFuture(`handle`, `free`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFuture) {
        `handle` = other.`handle`
        `free` = other.`free`
    }
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU8(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU8 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU8.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI8(
    @JvmField internal var `returnValue`: Byte = 0.toByte(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Byte = 0.toByte(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI8(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI8) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI8 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI8.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU16(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU16 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU16.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI16(
    @JvmField internal var `returnValue`: Short = 0.toShort(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Short = 0.toShort(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI16(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI16) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI16 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI16.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU32(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI32(
    @JvmField internal var `returnValue`: Int = 0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Int = 0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI32(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructU64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructU64(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructU64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteU64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructU64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructI64(
    @JvmField internal var `returnValue`: Long = 0.toLong(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Long = 0.toLong(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructI64(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructI64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteI64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructI64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF32(
    @JvmField internal var `returnValue`: Float = 0.0f,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Float = 0.0f,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF32(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF32) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteF32 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructF32.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructF64(
    @JvmField internal var `returnValue`: Double = 0.0,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Double = 0.0,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructF64(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructF64) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteF64 : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructF64.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructPointer(
    @JvmField internal var `returnValue`: Pointer = Pointer.NULL,
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: Pointer = Pointer.NULL,
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructPointer(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructPointer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompletePointer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructPointer.UniffiByValue,
    )
}

@Structure.FieldOrder("returnValue", "callStatus")
internal open class UniffiForeignFutureStructRustBuffer(
    @JvmField internal var `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `returnValue`: RustBuffer.ByValue = RustBuffer.ByValue(),
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructRustBuffer(`returnValue`, `callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructRustBuffer) {
        `returnValue` = other.`returnValue`
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteRustBuffer : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructRustBuffer.UniffiByValue,
    )
}

@Structure.FieldOrder("callStatus")
internal open class UniffiForeignFutureStructVoid(
    @JvmField internal var `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
) : Structure() {
    class UniffiByValue(
        `callStatus`: UniffiRustCallStatus.ByValue = UniffiRustCallStatus.ByValue(),
    ) : UniffiForeignFutureStructVoid(`callStatus`), Structure.ByValue

    internal fun uniffiSetValue(other: UniffiForeignFutureStructVoid) {
        `callStatus` = other.`callStatus`
    }
}

internal interface UniffiForeignFutureCompleteVoid : com.sun.jna.Callback {
    fun callback(
        `callbackData`: Long,
        `result`: UniffiForeignFutureStructVoid.UniffiByValue,
    )
}

// A JNA Library to expose the extern-C FFI definitions.
// This is an implementation detail which will be called internally by the public API.

internal interface UniffiLib : Library {
    companion object {
        internal val INSTANCE: UniffiLib by lazy {
            loadIndirect<UniffiLib>(componentName = "mercurylib")
                .also { lib: UniffiLib ->
                    uniffiCheckContractApiVersion(lib)
                    uniffiCheckApiChecksums(lib)
                }
        }
    }

    fun uniffi_mercurylib_fn_func_create_aggregated_address(
        `coin`: RustBuffer.ByValue,
        `network`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_create_and_commit_nonces(
        `coin`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_create_cpfp_tx(
        `backupTx`: RustBuffer.ByValue,
        `coin`: RustBuffer.ByValue,
        `toAddress`: RustBuffer.ByValue,
        `feeRateSatsPerByte`: Long,
        `network`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_create_deposit_msg1(
        `coin`: RustBuffer.ByValue,
        `tokenId`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_create_signature(
        `msg`: RustBuffer.ByValue,
        `clientPartialSigHex`: RustBuffer.ByValue,
        `serverPartialSigHex`: RustBuffer.ByValue,
        `sessionHex`: RustBuffer.ByValue,
        `outputPubkeyHex`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_create_transfer_signature(
        `recipientAddress`: RustBuffer.ByValue,
        `inputTxid`: RustBuffer.ByValue,
        `inputVout`: Int,
        `clientSeckey`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_create_transfer_update_msg(
        `x1`: RustBuffer.ByValue,
        `recipientAddress`: RustBuffer.ByValue,
        `coin`: RustBuffer.ByValue,
        `transferSignature`: RustBuffer.ByValue,
        `backupTransactions`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_decode_statechain_address(
        `scAddress`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_duplicate_coin_to_initialized_state(
        `wallet`: RustBuffer.ByValue,
        `authPubkey`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_ffi_verify_transfer_signature(
        `newUserPubkey`: RustBuffer.ByValue,
        `tx0Outpoint`: RustBuffer.ByValue,
        `ffiTransferMsg`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_mercurylib_fn_func_fii_create_transfer_receiver_request_payload(
        `statechainInfo`: RustBuffer.ByValue,
        `ffiTransferMsg`: RustBuffer.ByValue,
        `coin`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_fii_decrypt_transfer_msg(
        `encryptedMessage`: RustBuffer.ByValue,
        `privateKeyWif`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_fii_validate_tx0_output_pubkey(
        `enclavePublicKey`: RustBuffer.ByValue,
        `ffiTransferMsg`: RustBuffer.ByValue,
        `tx0Outpoint`: RustBuffer.ByValue,
        `tx0Hex`: RustBuffer.ByValue,
        `network`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_mercurylib_fn_func_fii_verify_latest_backup_tx_pays_to_user_pubkey(
        `ffiTransferMsg`: RustBuffer.ByValue,
        `clientPubkeyShare`: RustBuffer.ByValue,
        `network`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_mercurylib_fn_func_generate_mnemonic(uniffi_out_err: UniffiRustCallStatus): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_get_blockheight(
        `bkpTx`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun uniffi_mercurylib_fn_func_get_new_coin(
        `wallet`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_get_new_key_info(
        `serverPublicKeyHex`: RustBuffer.ByValue,
        `coin`: RustBuffer.ByValue,
        `statechainId`: RustBuffer.ByValue,
        `tx0Outpoint`: RustBuffer.ByValue,
        `tx0Hex`: RustBuffer.ByValue,
        `network`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_get_output_address_from_tx0(
        `tx0Outpoint`: RustBuffer.ByValue,
        `tx0Hex`: RustBuffer.ByValue,
        `network`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_get_partial_sig_request(
        `coin`: RustBuffer.ByValue,
        `blockHeight`: Int,
        `initlock`: Int,
        `interval`: Int,
        `feeRateSatsPerByte`: Int,
        `qtBackupTx`: Int,
        `toAddress`: RustBuffer.ByValue,
        `network`: RustBuffer.ByValue,
        `isWithdrawal`: Byte,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_get_tx0_outpoint(
        `backupTransactions`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_get_user_backup_address(
        `coin`: RustBuffer.ByValue,
        `network`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_handle_deposit_msg_1_response(
        `coin`: RustBuffer.ByValue,
        `depositMsg1Response`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_is_enclave_pubkey_part_of_coin(
        `coin`: RustBuffer.ByValue,
        `enclavePubkey`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_mercurylib_fn_func_latest_backup_tx_pays_to_user_pubkey(
        `backupTxs`: RustBuffer.ByValue,
        `coin`: RustBuffer.ByValue,
        `network`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_new_backup_transaction(
        `encodedUnsignedTx`: RustBuffer.ByValue,
        `signatureHex`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_sign_message(
        `message`: RustBuffer.ByValue,
        `coin`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun uniffi_mercurylib_fn_func_validate_address(
        `address`: RustBuffer.ByValue,
        `network`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun uniffi_mercurylib_fn_func_verify_blinded_musig_scheme(
        `backupTx`: RustBuffer.ByValue,
        `tx0Hex`: RustBuffer.ByValue,
        `statechainInfo`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_mercurylib_fn_func_verify_transaction_signature(
        `txNHex`: RustBuffer.ByValue,
        `tx0Hex`: RustBuffer.ByValue,
        `feeRateTolerance`: Int,
        `currentFeeRateSatsPerByte`: Int,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun ffi_mercurylib_rustbuffer_alloc(
        `size`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_mercurylib_rustbuffer_from_bytes(
        `bytes`: ForeignBytes.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_mercurylib_rustbuffer_free(
        `buf`: RustBuffer.ByValue,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun ffi_mercurylib_rustbuffer_reserve(
        `buf`: RustBuffer.ByValue,
        `additional`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_mercurylib_rust_future_poll_u8(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_u8(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_u8(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_u8(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_mercurylib_rust_future_poll_i8(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_i8(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_i8(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_i8(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Byte

    fun ffi_mercurylib_rust_future_poll_u16(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_u16(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_u16(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_u16(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_mercurylib_rust_future_poll_i16(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_i16(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_i16(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_i16(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Short

    fun ffi_mercurylib_rust_future_poll_u32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_u32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_u32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_u32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_mercurylib_rust_future_poll_i32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_i32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_i32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_i32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Int

    fun ffi_mercurylib_rust_future_poll_u64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_u64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_u64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_u64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_mercurylib_rust_future_poll_i64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_i64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_i64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_i64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Long

    fun ffi_mercurylib_rust_future_poll_f32(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_f32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_f32(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_f32(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Float

    fun ffi_mercurylib_rust_future_poll_f64(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_f64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_f64(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_f64(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Double

    fun ffi_mercurylib_rust_future_poll_pointer(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_pointer(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_pointer(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_pointer(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Pointer

    fun ffi_mercurylib_rust_future_poll_rust_buffer(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_rust_buffer(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_rust_buffer(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_rust_buffer(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): RustBuffer.ByValue

    fun ffi_mercurylib_rust_future_poll_void(
        `handle`: Long,
        `callback`: UniffiRustFutureContinuationCallback,
        `callbackData`: Long,
    ): Unit

    fun ffi_mercurylib_rust_future_cancel_void(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_free_void(`handle`: Long): Unit

    fun ffi_mercurylib_rust_future_complete_void(
        `handle`: Long,
        uniffi_out_err: UniffiRustCallStatus,
    ): Unit

    fun uniffi_mercurylib_checksum_func_create_aggregated_address(): Short

    fun uniffi_mercurylib_checksum_func_create_and_commit_nonces(): Short

    fun uniffi_mercurylib_checksum_func_create_cpfp_tx(): Short

    fun uniffi_mercurylib_checksum_func_create_deposit_msg1(): Short

    fun uniffi_mercurylib_checksum_func_create_signature(): Short

    fun uniffi_mercurylib_checksum_func_create_transfer_signature(): Short

    fun uniffi_mercurylib_checksum_func_create_transfer_update_msg(): Short

    fun uniffi_mercurylib_checksum_func_decode_statechain_address(): Short

    fun uniffi_mercurylib_checksum_func_duplicate_coin_to_initialized_state(): Short

    fun uniffi_mercurylib_checksum_func_ffi_verify_transfer_signature(): Short

    fun uniffi_mercurylib_checksum_func_fii_create_transfer_receiver_request_payload(): Short

    fun uniffi_mercurylib_checksum_func_fii_decrypt_transfer_msg(): Short

    fun uniffi_mercurylib_checksum_func_fii_validate_tx0_output_pubkey(): Short

    fun uniffi_mercurylib_checksum_func_fii_verify_latest_backup_tx_pays_to_user_pubkey(): Short

    fun uniffi_mercurylib_checksum_func_generate_mnemonic(): Short

    fun uniffi_mercurylib_checksum_func_get_blockheight(): Short

    fun uniffi_mercurylib_checksum_func_get_new_coin(): Short

    fun uniffi_mercurylib_checksum_func_get_new_key_info(): Short

    fun uniffi_mercurylib_checksum_func_get_output_address_from_tx0(): Short

    fun uniffi_mercurylib_checksum_func_get_partial_sig_request(): Short

    fun uniffi_mercurylib_checksum_func_get_tx0_outpoint(): Short

    fun uniffi_mercurylib_checksum_func_get_user_backup_address(): Short

    fun uniffi_mercurylib_checksum_func_handle_deposit_msg_1_response(): Short

    fun uniffi_mercurylib_checksum_func_is_enclave_pubkey_part_of_coin(): Short

    fun uniffi_mercurylib_checksum_func_latest_backup_tx_pays_to_user_pubkey(): Short

    fun uniffi_mercurylib_checksum_func_new_backup_transaction(): Short

    fun uniffi_mercurylib_checksum_func_sign_message(): Short

    fun uniffi_mercurylib_checksum_func_validate_address(): Short

    fun uniffi_mercurylib_checksum_func_verify_blinded_musig_scheme(): Short

    fun uniffi_mercurylib_checksum_func_verify_transaction_signature(): Short

    fun ffi_mercurylib_uniffi_contract_version(): Int
}

private fun uniffiCheckContractApiVersion(lib: UniffiLib) {
    // Get the bindings contract version from our ComponentInterface
    val bindings_contract_version = 26
    // Get the scaffolding contract version by calling the into the dylib
    val scaffolding_contract_version = lib.ffi_mercurylib_uniffi_contract_version()
    if (bindings_contract_version != scaffolding_contract_version) {
        throw RuntimeException("UniFFI contract version mismatch: try cleaning and rebuilding your project")
    }
}

@Suppress("UNUSED_PARAMETER")
private fun uniffiCheckApiChecksums(lib: UniffiLib) {
    if (lib.uniffi_mercurylib_checksum_func_create_aggregated_address() != 44269.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_create_and_commit_nonces() != 16584.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_create_cpfp_tx() != 63811.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_create_deposit_msg1() != 9767.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_create_signature() != 53021.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_create_transfer_signature() != 61677.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_create_transfer_update_msg() != 6918.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_decode_statechain_address() != 7125.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_duplicate_coin_to_initialized_state() != 30591.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_ffi_verify_transfer_signature() != 18534.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_fii_create_transfer_receiver_request_payload() != 58308.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_fii_decrypt_transfer_msg() != 44515.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_fii_validate_tx0_output_pubkey() != 51706.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_fii_verify_latest_backup_tx_pays_to_user_pubkey() != 46083.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_generate_mnemonic() != 62910.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_get_blockheight() != 5222.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_get_new_coin() != 45841.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_get_new_key_info() != 64987.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_get_output_address_from_tx0() != 62309.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_get_partial_sig_request() != 13111.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_get_tx0_outpoint() != 21467.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_get_user_backup_address() != 29075.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_handle_deposit_msg_1_response() != 64110.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_is_enclave_pubkey_part_of_coin() != 37041.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_latest_backup_tx_pays_to_user_pubkey() != 19689.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_new_backup_transaction() != 56642.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_sign_message() != 9994.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_validate_address() != 16334.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_verify_blinded_musig_scheme() != 42963.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
    if (lib.uniffi_mercurylib_checksum_func_verify_transaction_signature() != 32006.toShort()) {
        throw RuntimeException("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    }
}

// Async support

// Public interface members begin here.

// Interface implemented by anything that can contain an object reference.
//
// Such types expose a `destroy()` method that must be called to cleanly
// dispose of the contained objects. Failure to call this method may result
// in memory leaks.
//
// The easiest way to ensure this method is called is to use the `.use`
// helper method to execute a block and destroy the object at the end.
interface Disposable {
    fun destroy()

    companion object {
        fun destroy(vararg args: Any?) {
            args.filterIsInstance<Disposable>()
                .forEach(Disposable::destroy)
        }
    }
}

inline fun <T : Disposable?, R> T.use(block: (T) -> R) =
    try {
        block(this)
    } finally {
        try {
            // N.B. our implementation is on the nullable type `Disposable?`.
            this?.destroy()
        } catch (e: Throwable) {
            // swallow
        }
    }

/** Used to instantiate an interface without an actual pointer, for fakes in tests, mostly. */
object NoPointer

public object FfiConverterUByte : FfiConverter<UByte, Byte> {
    override fun lift(value: Byte): UByte {
        return value.toUByte()
    }

    override fun read(buf: ByteBuffer): UByte {
        return lift(buf.get())
    }

    override fun lower(value: UByte): Byte {
        return value.toByte()
    }

    override fun allocationSize(value: UByte) = 1UL

    override fun write(
        value: UByte,
        buf: ByteBuffer,
    ) {
        buf.put(value.toByte())
    }
}

public object FfiConverterUInt : FfiConverter<UInt, Int> {
    override fun lift(value: Int): UInt {
        return value.toUInt()
    }

    override fun read(buf: ByteBuffer): UInt {
        return lift(buf.getInt())
    }

    override fun lower(value: UInt): Int {
        return value.toInt()
    }

    override fun allocationSize(value: UInt) = 4UL

    override fun write(
        value: UInt,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.toInt())
    }
}

public object FfiConverterULong : FfiConverter<ULong, Long> {
    override fun lift(value: Long): ULong {
        return value.toULong()
    }

    override fun read(buf: ByteBuffer): ULong {
        return lift(buf.getLong())
    }

    override fun lower(value: ULong): Long {
        return value.toLong()
    }

    override fun allocationSize(value: ULong) = 8UL

    override fun write(
        value: ULong,
        buf: ByteBuffer,
    ) {
        buf.putLong(value.toLong())
    }
}

public object FfiConverterBoolean : FfiConverter<Boolean, Byte> {
    override fun lift(value: Byte): Boolean {
        return value.toInt() != 0
    }

    override fun read(buf: ByteBuffer): Boolean {
        return lift(buf.get())
    }

    override fun lower(value: Boolean): Byte {
        return if (value) 1.toByte() else 0.toByte()
    }

    override fun allocationSize(value: Boolean) = 1UL

    override fun write(
        value: Boolean,
        buf: ByteBuffer,
    ) {
        buf.put(lower(value))
    }
}

public object FfiConverterString : FfiConverter<String, RustBuffer.ByValue> {
    // Note: we don't inherit from FfiConverterRustBuffer, because we use a
    // special encoding when lowering/lifting.  We can use `RustBuffer.len` to
    // store our length and avoid writing it out to the buffer.
    override fun lift(value: RustBuffer.ByValue): String {
        try {
            val byteArr = ByteArray(value.len.toInt())
            value.asByteBuffer()!!.get(byteArr)
            return byteArr.toString(Charsets.UTF_8)
        } finally {
            RustBuffer.free(value)
        }
    }

    override fun read(buf: ByteBuffer): String {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr.toString(Charsets.UTF_8)
    }

    fun toUtf8(value: String): ByteBuffer {
        // Make sure we don't have invalid UTF-16, check for lone surrogates.
        return Charsets.UTF_8.newEncoder().run {
            onMalformedInput(CodingErrorAction.REPORT)
            encode(CharBuffer.wrap(value))
        }
    }

    override fun lower(value: String): RustBuffer.ByValue {
        val byteBuf = toUtf8(value)
        // Ideally we'd pass these bytes to `ffi_bytebuffer_from_bytes`, but doing so would require us
        // to copy them into a JNA `Memory`. So we might as well directly copy them into a `RustBuffer`.
        val rbuf = RustBuffer.alloc(byteBuf.limit().toULong())
        rbuf.asByteBuffer()!!.put(byteBuf)
        return rbuf
    }

    // We aren't sure exactly how many bytes our string will be once it's UTF-8
    // encoded.  Allocate 3 bytes per UTF-16 code unit which will always be
    // enough.
    override fun allocationSize(value: String): ULong {
        val sizeForLength = 4UL
        val sizeForString = value.length.toULong() * 3UL
        return sizeForLength + sizeForString
    }

    override fun write(
        value: String,
        buf: ByteBuffer,
    ) {
        val byteBuf = toUtf8(value)
        buf.putInt(byteBuf.limit())
        buf.put(byteBuf)
    }
}

public object FfiConverterByteArray : FfiConverterRustBuffer<ByteArray> {
    override fun read(buf: ByteBuffer): ByteArray {
        val len = buf.getInt()
        val byteArr = ByteArray(len)
        buf.get(byteArr)
        return byteArr
    }

    override fun allocationSize(value: ByteArray): ULong {
        return 4UL + value.size.toULong()
    }

    override fun write(
        value: ByteArray,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        buf.put(value)
    }
}

@Serializable
data class Activity(
    var `utxo`: kotlin.String,
    var `amount`: kotlin.UInt,
    var `action`: kotlin.String,
    var `date`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeActivity : FfiConverterRustBuffer<Activity> {
    override fun read(buf: ByteBuffer): Activity {
        return Activity(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Activity) =
        (
            FfiConverterString.allocationSize(value.`utxo`) +
                FfiConverterUInt.allocationSize(value.`amount`) +
                FfiConverterString.allocationSize(value.`action`) +
                FfiConverterString.allocationSize(value.`date`)
        )

    override fun write(
        value: Activity,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`utxo`, buf)
        FfiConverterUInt.write(value.`amount`, buf)
        FfiConverterString.write(value.`action`, buf)
        FfiConverterString.write(value.`date`, buf)
    }
}

@Serializable
data class AggregatedPublicKey(
    var `aggregatePubkey`: kotlin.String,
    var `aggregateAddress`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeAggregatedPublicKey : FfiConverterRustBuffer<AggregatedPublicKey> {
    override fun read(buf: ByteBuffer): AggregatedPublicKey {
        return AggregatedPublicKey(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: AggregatedPublicKey) =
        (
            FfiConverterString.allocationSize(value.`aggregatePubkey`) +
                FfiConverterString.allocationSize(value.`aggregateAddress`)
        )

    override fun write(
        value: AggregatedPublicKey,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`aggregatePubkey`, buf)
        FfiConverterString.write(value.`aggregateAddress`, buf)
    }
}

@Serializable
data class BackupTx(
    var `txN`: kotlin.UInt,
    var `tx`: kotlin.String,
    var `clientPublicNonce`: kotlin.String,
    var `serverPublicNonce`: kotlin.String,
    var `clientPublicKey`: kotlin.String,
    var `serverPublicKey`: kotlin.String,
    var `blindingFactor`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeBackupTx : FfiConverterRustBuffer<BackupTx> {
    override fun read(buf: ByteBuffer): BackupTx {
        return BackupTx(
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: BackupTx) =
        (
            FfiConverterUInt.allocationSize(value.`txN`) +
                FfiConverterString.allocationSize(value.`tx`) +
                FfiConverterString.allocationSize(value.`clientPublicNonce`) +
                FfiConverterString.allocationSize(value.`serverPublicNonce`) +
                FfiConverterString.allocationSize(value.`clientPublicKey`) +
                FfiConverterString.allocationSize(value.`serverPublicKey`) +
                FfiConverterString.allocationSize(value.`blindingFactor`)
        )

    override fun write(
        value: BackupTx,
        buf: ByteBuffer,
    ) {
        FfiConverterUInt.write(value.`txN`, buf)
        FfiConverterString.write(value.`tx`, buf)
        FfiConverterString.write(value.`clientPublicNonce`, buf)
        FfiConverterString.write(value.`serverPublicNonce`, buf)
        FfiConverterString.write(value.`clientPublicKey`, buf)
        FfiConverterString.write(value.`serverPublicKey`, buf)
        FfiConverterString.write(value.`blindingFactor`, buf)
    }
}

@Serializable
data class Coin(
    var `index`: kotlin.UInt,
    var `userPrivkey`: kotlin.String,
    var `userPubkey`: kotlin.String,
    var `authPrivkey`: kotlin.String,
    var `authPubkey`: kotlin.String,
    var `derivationPath`: kotlin.String,
    var `fingerprint`: kotlin.String,
    /**
     * The coin address is the user_pubkey || auth_pubkey
     * Used to transfer the coin to another wallet
     */
    var `address`: kotlin.String,
    /**
     * The backup address is the address used in backup transactions
     * The backup address is the p2tr address of the user_pubkey
     */
    var `backupAddress`: kotlin.String,
    var `serverPubkey`: kotlin.String?,
    var `aggregatedPubkey`: kotlin.String?,
    /**
     * The aggregated address is the P2TR address from aggregated_pubkey
     */
    var `aggregatedAddress`: kotlin.String?,
    var `utxoTxid`: kotlin.String?,
    var `utxoVout`: kotlin.UInt?,
    var `amount`: kotlin.UInt?,
    var `statechainId`: kotlin.String?,
    var `signedStatechainId`: kotlin.String?,
    var `locktime`: kotlin.UInt?,
    var `secretNonce`: kotlin.String?,
    var `publicNonce`: kotlin.String?,
    var `blindingFactor`: kotlin.String?,
    var `serverPublicNonce`: kotlin.String?,
    var `txCpfp`: kotlin.String?,
    var `txWithdraw`: kotlin.String?,
    var `withdrawalAddress`: kotlin.String?,
    var `status`: CoinStatus,
) {
    companion object
}

public object FfiConverterTypeCoin : FfiConverterRustBuffer<Coin> {
    override fun read(buf: ByteBuffer): Coin {
        return Coin(
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalUInt.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterTypeCoinStatus.read(buf),
        )
    }

    override fun allocationSize(value: Coin) =
        (
            FfiConverterUInt.allocationSize(value.`index`) +
                FfiConverterString.allocationSize(value.`userPrivkey`) +
                FfiConverterString.allocationSize(value.`userPubkey`) +
                FfiConverterString.allocationSize(value.`authPrivkey`) +
                FfiConverterString.allocationSize(value.`authPubkey`) +
                FfiConverterString.allocationSize(value.`derivationPath`) +
                FfiConverterString.allocationSize(value.`fingerprint`) +
                FfiConverterString.allocationSize(value.`address`) +
                FfiConverterString.allocationSize(value.`backupAddress`) +
                FfiConverterOptionalString.allocationSize(value.`serverPubkey`) +
                FfiConverterOptionalString.allocationSize(value.`aggregatedPubkey`) +
                FfiConverterOptionalString.allocationSize(value.`aggregatedAddress`) +
                FfiConverterOptionalString.allocationSize(value.`utxoTxid`) +
                FfiConverterOptionalUInt.allocationSize(value.`utxoVout`) +
                FfiConverterOptionalUInt.allocationSize(value.`amount`) +
                FfiConverterOptionalString.allocationSize(value.`statechainId`) +
                FfiConverterOptionalString.allocationSize(value.`signedStatechainId`) +
                FfiConverterOptionalUInt.allocationSize(value.`locktime`) +
                FfiConverterOptionalString.allocationSize(value.`secretNonce`) +
                FfiConverterOptionalString.allocationSize(value.`publicNonce`) +
                FfiConverterOptionalString.allocationSize(value.`blindingFactor`) +
                FfiConverterOptionalString.allocationSize(value.`serverPublicNonce`) +
                FfiConverterOptionalString.allocationSize(value.`txCpfp`) +
                FfiConverterOptionalString.allocationSize(value.`txWithdraw`) +
                FfiConverterOptionalString.allocationSize(value.`withdrawalAddress`) +
                FfiConverterTypeCoinStatus.allocationSize(value.`status`)
        )

    override fun write(
        value: Coin,
        buf: ByteBuffer,
    ) {
        FfiConverterUInt.write(value.`index`, buf)
        FfiConverterString.write(value.`userPrivkey`, buf)
        FfiConverterString.write(value.`userPubkey`, buf)
        FfiConverterString.write(value.`authPrivkey`, buf)
        FfiConverterString.write(value.`authPubkey`, buf)
        FfiConverterString.write(value.`derivationPath`, buf)
        FfiConverterString.write(value.`fingerprint`, buf)
        FfiConverterString.write(value.`address`, buf)
        FfiConverterString.write(value.`backupAddress`, buf)
        FfiConverterOptionalString.write(value.`serverPubkey`, buf)
        FfiConverterOptionalString.write(value.`aggregatedPubkey`, buf)
        FfiConverterOptionalString.write(value.`aggregatedAddress`, buf)
        FfiConverterOptionalString.write(value.`utxoTxid`, buf)
        FfiConverterOptionalUInt.write(value.`utxoVout`, buf)
        FfiConverterOptionalUInt.write(value.`amount`, buf)
        FfiConverterOptionalString.write(value.`statechainId`, buf)
        FfiConverterOptionalString.write(value.`signedStatechainId`, buf)
        FfiConverterOptionalUInt.write(value.`locktime`, buf)
        FfiConverterOptionalString.write(value.`secretNonce`, buf)
        FfiConverterOptionalString.write(value.`publicNonce`, buf)
        FfiConverterOptionalString.write(value.`blindingFactor`, buf)
        FfiConverterOptionalString.write(value.`serverPublicNonce`, buf)
        FfiConverterOptionalString.write(value.`txCpfp`, buf)
        FfiConverterOptionalString.write(value.`txWithdraw`, buf)
        FfiConverterOptionalString.write(value.`withdrawalAddress`, buf)
        FfiConverterTypeCoinStatus.write(value.`status`, buf)
    }
}

data class CoinNonce(
    var `secretNonce`: kotlin.String,
    var `publicNonce`: kotlin.String,
    var `blindingFactor`: kotlin.String,
    var `signFirstRequestPayload`: SignFirstRequestPayload,
) {
    companion object
}

public object FfiConverterTypeCoinNonce : FfiConverterRustBuffer<CoinNonce> {
    override fun read(buf: ByteBuffer): CoinNonce {
        return CoinNonce(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypeSignFirstRequestPayload.read(buf),
        )
    }

    override fun allocationSize(value: CoinNonce) =
        (
            FfiConverterString.allocationSize(value.`secretNonce`) +
                FfiConverterString.allocationSize(value.`publicNonce`) +
                FfiConverterString.allocationSize(value.`blindingFactor`) +
                FfiConverterTypeSignFirstRequestPayload.allocationSize(value.`signFirstRequestPayload`)
        )

    override fun write(
        value: CoinNonce,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`secretNonce`, buf)
        FfiConverterString.write(value.`publicNonce`, buf)
        FfiConverterString.write(value.`blindingFactor`, buf)
        FfiConverterTypeSignFirstRequestPayload.write(value.`signFirstRequestPayload`, buf)
    }
}

class CoinStatusParseError {
    override fun equals(other: Any?): Boolean {
        return other is CoinStatusParseError
    }

    override fun hashCode(): Int {
        return javaClass.hashCode()
    }

    companion object
}

public object FfiConverterTypeCoinStatusParseError : FfiConverterRustBuffer<CoinStatusParseError> {
    override fun read(buf: ByteBuffer): CoinStatusParseError {
        return CoinStatusParseError()
    }

    override fun allocationSize(value: CoinStatusParseError) = 0UL

    override fun write(
        value: CoinStatusParseError,
        buf: ByteBuffer,
    ) {
    }
}

data class DecodedScAddress(
    var `version`: kotlin.UByte,
    var `userPubkey`: kotlin.String,
    var `authPubkey`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeDecodedSCAddress : FfiConverterRustBuffer<DecodedScAddress> {
    override fun read(buf: ByteBuffer): DecodedScAddress {
        return DecodedScAddress(
            FfiConverterUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: DecodedScAddress) =
        (
            FfiConverterUByte.allocationSize(value.`version`) +
                FfiConverterString.allocationSize(value.`userPubkey`) +
                FfiConverterString.allocationSize(value.`authPubkey`)
        )

    override fun write(
        value: DecodedScAddress,
        buf: ByteBuffer,
    ) {
        FfiConverterUByte.write(value.`version`, buf)
        FfiConverterString.write(value.`userPubkey`, buf)
        FfiConverterString.write(value.`authPubkey`, buf)
    }
}

@Serializable
data class DepositInitResult(
    var `serverPubkey`: kotlin.String,
    var `statechainId`: kotlin.String,
    var `signedStatechainId`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeDepositInitResult : FfiConverterRustBuffer<DepositInitResult> {
    override fun read(buf: ByteBuffer): DepositInitResult {
        return DepositInitResult(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: DepositInitResult) =
        (
            FfiConverterString.allocationSize(value.`serverPubkey`) +
                FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterString.allocationSize(value.`signedStatechainId`)
        )

    override fun write(
        value: DepositInitResult,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`serverPubkey`, buf)
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterString.write(value.`signedStatechainId`, buf)
    }
}

@Serializable
data class DepositMsg1(
	@SerialName("auth_key")
    var `authKey`: kotlin.String,
	@SerialName("token_id")
    var `tokenId`: kotlin.String,
	@SerialName("signed_token_id")
    var `signedTokenId`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeDepositMsg1 : FfiConverterRustBuffer<DepositMsg1> {
    override fun read(buf: ByteBuffer): DepositMsg1 {
        return DepositMsg1(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: DepositMsg1) =
        (
            FfiConverterString.allocationSize(value.`authKey`) +
                FfiConverterString.allocationSize(value.`tokenId`) +
                FfiConverterString.allocationSize(value.`signedTokenId`)
        )

    override fun write(
        value: DepositMsg1,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`authKey`, buf)
        FfiConverterString.write(value.`tokenId`, buf)
        FfiConverterString.write(value.`signedTokenId`, buf)
    }
}

@Serializable
data class DepositMsg1Response(
	@SerialName("server_pubkey")
    var `serverPubkey`: kotlin.String,
	@SerialName("statechain_id")
    var `statechainId`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeDepositMsg1Response : FfiConverterRustBuffer<DepositMsg1Response> {
    override fun read(buf: ByteBuffer): DepositMsg1Response {
        return DepositMsg1Response(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: DepositMsg1Response) =
        (
            FfiConverterString.allocationSize(value.`serverPubkey`) +
                FfiConverterString.allocationSize(value.`statechainId`)
        )

    override fun write(
        value: DepositMsg1Response,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`serverPubkey`, buf)
        FfiConverterString.write(value.`statechainId`, buf)
    }
}

data class FfiTransferMsg(
    var `statechainId`: kotlin.String,
    var `transferSignature`: kotlin.String,
    var `backupTransactions`: List<BackupTx>,
    var `t1`: kotlin.ByteArray,
    var `userPublicKey`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeFFITransferMsg : FfiConverterRustBuffer<FfiTransferMsg> {
    override fun read(buf: ByteBuffer): FfiTransferMsg {
        return FfiTransferMsg(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeBackupTx.read(buf),
            FfiConverterByteArray.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: FfiTransferMsg) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterString.allocationSize(value.`transferSignature`) +
                FfiConverterSequenceTypeBackupTx.allocationSize(value.`backupTransactions`) +
                FfiConverterByteArray.allocationSize(value.`t1`) +
                FfiConverterString.allocationSize(value.`userPublicKey`)
        )

    override fun write(
        value: FfiTransferMsg,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterString.write(value.`transferSignature`, buf)
        FfiConverterSequenceTypeBackupTx.write(value.`backupTransactions`, buf)
        FfiConverterByteArray.write(value.`t1`, buf)
        FfiConverterString.write(value.`userPublicKey`, buf)
    }
}

@Serializable
data class GetMsgAddrResponsePayload(
	@SerialName("list_enc_transfer_msg")
    var `listEncTransferMsg`: List<kotlin.String>,
) {
    companion object
}

public object FfiConverterTypeGetMsgAddrResponsePayload : FfiConverterRustBuffer<GetMsgAddrResponsePayload> {
    override fun read(buf: ByteBuffer): GetMsgAddrResponsePayload {
        return GetMsgAddrResponsePayload(
            FfiConverterSequenceString.read(buf),
        )
    }

    override fun allocationSize(value: GetMsgAddrResponsePayload) =
        (
            FfiConverterSequenceString.allocationSize(value.`listEncTransferMsg`)
        )

    override fun write(
        value: GetMsgAddrResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterSequenceString.write(value.`listEncTransferMsg`, buf)
    }
}

data class InfoConfig(
    var `initlock`: kotlin.UInt,
    var `interval`: kotlin.UInt,
    var `feeRateSatsPerByte`: kotlin.ULong,
) {
    companion object
}

public object FfiConverterTypeInfoConfig : FfiConverterRustBuffer<InfoConfig> {
    override fun read(buf: ByteBuffer): InfoConfig {
        return InfoConfig(
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterULong.read(buf),
        )
    }

    override fun allocationSize(value: InfoConfig) =
        (
            FfiConverterUInt.allocationSize(value.`initlock`) +
                FfiConverterUInt.allocationSize(value.`interval`) +
                FfiConverterULong.allocationSize(value.`feeRateSatsPerByte`)
        )

    override fun write(
        value: InfoConfig,
        buf: ByteBuffer,
    ) {
        FfiConverterUInt.write(value.`initlock`, buf)
        FfiConverterUInt.write(value.`interval`, buf)
        FfiConverterULong.write(value.`feeRateSatsPerByte`, buf)
    }
}

data class KeyListResponsePayload(
    var `listKeyinfo`: List<PubKeyInfo>,
) {
    companion object
}

public object FfiConverterTypeKeyListResponsePayload : FfiConverterRustBuffer<KeyListResponsePayload> {
    override fun read(buf: ByteBuffer): KeyListResponsePayload {
        return KeyListResponsePayload(
            FfiConverterSequenceTypePubKeyInfo.read(buf),
        )
    }

    override fun allocationSize(value: KeyListResponsePayload) =
        (
            FfiConverterSequenceTypePubKeyInfo.allocationSize(value.`listKeyinfo`)
        )

    override fun write(
        value: KeyListResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterSequenceTypePubKeyInfo.write(value.`listKeyinfo`, buf)
    }
}

@Serializable
data class KeyUpdateResponsePayload(
	@SerialName("statechain_id")
    var `statechainId`: kotlin.String,
    var `t2`: kotlin.String,
    var `x1`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeKeyUpdateResponsePayload : FfiConverterRustBuffer<KeyUpdateResponsePayload> {
    override fun read(buf: ByteBuffer): KeyUpdateResponsePayload {
        return KeyUpdateResponsePayload(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: KeyUpdateResponsePayload) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterString.allocationSize(value.`t2`) +
                FfiConverterString.allocationSize(value.`x1`)
        )

    override fun write(
        value: KeyUpdateResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterString.write(value.`t2`, buf)
        FfiConverterString.write(value.`x1`, buf)
    }
}

data class NewKeyInfo(
    var `aggregatePubkey`: kotlin.String,
    var `aggregateAddress`: kotlin.String,
    var `signedStatechainId`: kotlin.String,
    var `amount`: kotlin.UInt,
) {
    companion object
}

public object FfiConverterTypeNewKeyInfo : FfiConverterRustBuffer<NewKeyInfo> {
    override fun read(buf: ByteBuffer): NewKeyInfo {
        return NewKeyInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: NewKeyInfo) =
        (
            FfiConverterString.allocationSize(value.`aggregatePubkey`) +
                FfiConverterString.allocationSize(value.`aggregateAddress`) +
                FfiConverterString.allocationSize(value.`signedStatechainId`) +
                FfiConverterUInt.allocationSize(value.`amount`)
        )

    override fun write(
        value: NewKeyInfo,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`aggregatePubkey`, buf)
        FfiConverterString.write(value.`aggregateAddress`, buf)
        FfiConverterString.write(value.`signedStatechainId`, buf)
        FfiConverterUInt.write(value.`amount`, buf)
    }
}

data class PartialSignatureMsg1(
    var `msg`: kotlin.String,
    var `outputPubkey`: kotlin.String,
    var `clientPartialSig`: kotlin.String,
    var `encodedSession`: kotlin.String,
    var `encodedUnsignedTx`: kotlin.String,
    var `partialSignatureRequestPayload`: PartialSignatureRequestPayload,
) {
    companion object
}

public object FfiConverterTypePartialSignatureMsg1 : FfiConverterRustBuffer<PartialSignatureMsg1> {
    override fun read(buf: ByteBuffer): PartialSignatureMsg1 {
        return PartialSignatureMsg1(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterTypePartialSignatureRequestPayload.read(buf),
        )
    }

    override fun allocationSize(value: PartialSignatureMsg1) =
        (
            FfiConverterString.allocationSize(value.`msg`) +
                FfiConverterString.allocationSize(value.`outputPubkey`) +
                FfiConverterString.allocationSize(value.`clientPartialSig`) +
                FfiConverterString.allocationSize(value.`encodedSession`) +
                FfiConverterString.allocationSize(value.`encodedUnsignedTx`) +
                FfiConverterTypePartialSignatureRequestPayload.allocationSize(value.`partialSignatureRequestPayload`)
        )

    override fun write(
        value: PartialSignatureMsg1,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`msg`, buf)
        FfiConverterString.write(value.`outputPubkey`, buf)
        FfiConverterString.write(value.`clientPartialSig`, buf)
        FfiConverterString.write(value.`encodedSession`, buf)
        FfiConverterString.write(value.`encodedUnsignedTx`, buf)
        FfiConverterTypePartialSignatureRequestPayload.write(value.`partialSignatureRequestPayload`, buf)
    }
}

@Serializable
data class PartialSignatureRequestPayload(
	@SerialName("statechain_id")
    var `statechainId`: kotlin.String,
	@SerialName("negate_seckey")
    var `negateSeckey`: kotlin.UByte,
    var `session`: kotlin.String,
	@SerialName("signed_statechain_id")
    var `signedStatechainId`: kotlin.String,
	@SerialName("server_pub_nonce")
    var `serverPubNonce`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypePartialSignatureRequestPayload : FfiConverterRustBuffer<PartialSignatureRequestPayload> {
    override fun read(buf: ByteBuffer): PartialSignatureRequestPayload {
        return PartialSignatureRequestPayload(
            FfiConverterString.read(buf),
            FfiConverterUByte.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: PartialSignatureRequestPayload) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterUByte.allocationSize(value.`negateSeckey`) +
                FfiConverterString.allocationSize(value.`session`) +
                FfiConverterString.allocationSize(value.`signedStatechainId`) +
                FfiConverterString.allocationSize(value.`serverPubNonce`)
        )

    override fun write(
        value: PartialSignatureRequestPayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterUByte.write(value.`negateSeckey`, buf)
        FfiConverterString.write(value.`session`, buf)
        FfiConverterString.write(value.`signedStatechainId`, buf)
        FfiConverterString.write(value.`serverPubNonce`, buf)
    }
}

@Serializable
data class PartialSignatureResponsePayload(
	@SerialName("partial_sig")
    var `partialSig`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypePartialSignatureResponsePayload : FfiConverterRustBuffer<PartialSignatureResponsePayload> {
    override fun read(buf: ByteBuffer): PartialSignatureResponsePayload {
        return PartialSignatureResponsePayload(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: PartialSignatureResponsePayload) =
        (
            FfiConverterString.allocationSize(value.`partialSig`)
        )

    override fun write(
        value: PartialSignatureResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`partialSig`, buf)
    }
}

data class PubKeyInfo(
    var `serverPubkey`: kotlin.String,
    var `txN`: kotlin.UInt,
    var `updatedAt`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypePubKeyInfo : FfiConverterRustBuffer<PubKeyInfo> {
    override fun read(buf: ByteBuffer): PubKeyInfo {
        return PubKeyInfo(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: PubKeyInfo) =
        (
            FfiConverterString.allocationSize(value.`serverPubkey`) +
                FfiConverterUInt.allocationSize(value.`txN`) +
                FfiConverterString.allocationSize(value.`updatedAt`)
        )

    override fun write(
        value: PubKeyInfo,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`serverPubkey`, buf)
        FfiConverterUInt.write(value.`txN`, buf)
        FfiConverterString.write(value.`updatedAt`, buf)
    }
}

@Serializable
data class ServerConfig(
    var `initlock`: kotlin.UInt,
    var `interval`: kotlin.UInt,
) {
    companion object
}

public object FfiConverterTypeServerConfig : FfiConverterRustBuffer<ServerConfig> {
    override fun read(buf: ByteBuffer): ServerConfig {
        return ServerConfig(
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: ServerConfig) =
        (
            FfiConverterUInt.allocationSize(value.`initlock`) +
                FfiConverterUInt.allocationSize(value.`interval`)
        )

    override fun write(
        value: ServerConfig,
        buf: ByteBuffer,
    ) {
        FfiConverterUInt.write(value.`initlock`, buf)
        FfiConverterUInt.write(value.`interval`, buf)
    }
}

data class ServerPublicNonceResponsePayload(
    var `serverPubnonce`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeServerPublicNonceResponsePayload : FfiConverterRustBuffer<ServerPublicNonceResponsePayload> {
    override fun read(buf: ByteBuffer): ServerPublicNonceResponsePayload {
        return ServerPublicNonceResponsePayload(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: ServerPublicNonceResponsePayload) =
        (
            FfiConverterString.allocationSize(value.`serverPubnonce`)
        )

    override fun write(
        value: ServerPublicNonceResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`serverPubnonce`, buf)
    }
}

@Serializable
data class Settings(
    var `network`: kotlin.String,
    var `blockExplorerUrl`: kotlin.String?,
    var `torProxyHost`: kotlin.String?,
    var `torProxyPort`: kotlin.String?,
    var `torProxyControlPassword`: kotlin.String?,
    var `torProxyControlPort`: kotlin.String?,
    var `statechainEntityApi`: kotlin.String,
    var `torStatechainEntityApi`: kotlin.String?,
    var `electrumProtocol`: kotlin.String,
    var `electrumHost`: kotlin.String,
    var `electrumPort`: kotlin.String,
    var `electrumType`: kotlin.String,
    var `notifications`: kotlin.Boolean,
    var `tutorials`: kotlin.Boolean,
) {
    companion object
}

public object FfiConverterTypeSettings : FfiConverterRustBuffer<Settings> {
    override fun read(buf: ByteBuffer): Settings {
        return Settings(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
        )
    }

    override fun allocationSize(value: Settings) =
        (
            FfiConverterString.allocationSize(value.`network`) +
                FfiConverterOptionalString.allocationSize(value.`blockExplorerUrl`) +
                FfiConverterOptionalString.allocationSize(value.`torProxyHost`) +
                FfiConverterOptionalString.allocationSize(value.`torProxyPort`) +
                FfiConverterOptionalString.allocationSize(value.`torProxyControlPassword`) +
                FfiConverterOptionalString.allocationSize(value.`torProxyControlPort`) +
                FfiConverterString.allocationSize(value.`statechainEntityApi`) +
                FfiConverterOptionalString.allocationSize(value.`torStatechainEntityApi`) +
                FfiConverterString.allocationSize(value.`electrumProtocol`) +
                FfiConverterString.allocationSize(value.`electrumHost`) +
                FfiConverterString.allocationSize(value.`electrumPort`) +
                FfiConverterString.allocationSize(value.`electrumType`) +
                FfiConverterBoolean.allocationSize(value.`notifications`) +
                FfiConverterBoolean.allocationSize(value.`tutorials`)
        )

    override fun write(
        value: Settings,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`network`, buf)
        FfiConverterOptionalString.write(value.`blockExplorerUrl`, buf)
        FfiConverterOptionalString.write(value.`torProxyHost`, buf)
        FfiConverterOptionalString.write(value.`torProxyPort`, buf)
        FfiConverterOptionalString.write(value.`torProxyControlPassword`, buf)
        FfiConverterOptionalString.write(value.`torProxyControlPort`, buf)
        FfiConverterString.write(value.`statechainEntityApi`, buf)
        FfiConverterOptionalString.write(value.`torStatechainEntityApi`, buf)
        FfiConverterString.write(value.`electrumProtocol`, buf)
        FfiConverterString.write(value.`electrumHost`, buf)
        FfiConverterString.write(value.`electrumPort`, buf)
        FfiConverterString.write(value.`electrumType`, buf)
        FfiConverterBoolean.write(value.`notifications`, buf)
        FfiConverterBoolean.write(value.`tutorials`, buf)
    }
}

@Serializable
data class SignFirstRequestPayload(
	@SerialName("statechain_id")
    var `statechainId`: kotlin.String,
	@SerialName("signed_statechain_id")
    var `signedStatechainId`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeSignFirstRequestPayload : FfiConverterRustBuffer<SignFirstRequestPayload> {
    override fun read(buf: ByteBuffer): SignFirstRequestPayload {
        return SignFirstRequestPayload(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: SignFirstRequestPayload) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterString.allocationSize(value.`signedStatechainId`)
        )

    override fun write(
        value: SignFirstRequestPayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterString.write(value.`signedStatechainId`, buf)
    }
}

@Serializable
data class SignFirstResponsePayload(
	@SerialName("server_pubnonce")
    var `serverPubnonce`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeSignFirstResponsePayload : FfiConverterRustBuffer<SignFirstResponsePayload> {
    override fun read(buf: ByteBuffer): SignFirstResponsePayload {
        return SignFirstResponsePayload(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: SignFirstResponsePayload) =
        (
            FfiConverterString.allocationSize(value.`serverPubnonce`)
        )

    override fun write(
        value: SignFirstResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`serverPubnonce`, buf)
    }
}

data class StatechainBackupTxs(
    var `statechainId`: kotlin.String,
    var `backupTxs`: List<BackupTx>,
) {
    companion object
}

public object FfiConverterTypeStatechainBackupTxs : FfiConverterRustBuffer<StatechainBackupTxs> {
    override fun read(buf: ByteBuffer): StatechainBackupTxs {
        return StatechainBackupTxs(
            FfiConverterString.read(buf),
            FfiConverterSequenceTypeBackupTx.read(buf),
        )
    }

    override fun allocationSize(value: StatechainBackupTxs) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterSequenceTypeBackupTx.allocationSize(value.`backupTxs`)
        )

    override fun write(
        value: StatechainBackupTxs,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterSequenceTypeBackupTx.write(value.`backupTxs`, buf)
    }
}

@Serializable
data class StatechainInfo(
	@SerialName("statechain_id")
    var `statechainId`: kotlin.String,
	@SerialName("server_pubnonce")
    var `serverPubnonce`: kotlin.String,
    var `challenge`: kotlin.String,
	@SerialName("tx_n")
    var `txN`: kotlin.UInt,
) {
    companion object
}

public object FfiConverterTypeStatechainInfo : FfiConverterRustBuffer<StatechainInfo> {
    override fun read(buf: ByteBuffer): StatechainInfo {
        return StatechainInfo(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: StatechainInfo) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterString.allocationSize(value.`serverPubnonce`) +
                FfiConverterString.allocationSize(value.`challenge`) +
                FfiConverterUInt.allocationSize(value.`txN`)
        )

    override fun write(
        value: StatechainInfo,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterString.write(value.`serverPubnonce`, buf)
        FfiConverterString.write(value.`challenge`, buf)
        FfiConverterUInt.write(value.`txN`, buf)
    }
}

@Serializable
data class StatechainInfoResponsePayload(
	@SerialName("enclave_public_key")
    var `enclavePublicKey`: kotlin.String,
	@SerialName("num_sigs")
    var `numSigs`: kotlin.UInt,
	@SerialName("statechain_info")
    var `statechainInfo`: List<StatechainInfo>,
	@SerialName("x1_pub")
    var `x1Pub`: kotlin.String?,
) {
    companion object
}

public object FfiConverterTypeStatechainInfoResponsePayload : FfiConverterRustBuffer<StatechainInfoResponsePayload> {
    override fun read(buf: ByteBuffer): StatechainInfoResponsePayload {
        return StatechainInfoResponsePayload(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterSequenceTypeStatechainInfo.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: StatechainInfoResponsePayload) =
        (
            FfiConverterString.allocationSize(value.`enclavePublicKey`) +
                FfiConverterUInt.allocationSize(value.`numSigs`) +
                FfiConverterSequenceTypeStatechainInfo.allocationSize(value.`statechainInfo`) +
                FfiConverterOptionalString.allocationSize(value.`x1Pub`)
        )

    override fun write(
        value: StatechainInfoResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`enclavePublicKey`, buf)
        FfiConverterUInt.write(value.`numSigs`, buf)
        FfiConverterSequenceTypeStatechainInfo.write(value.`statechainInfo`, buf)
        FfiConverterOptionalString.write(value.`x1Pub`, buf)
    }
}

@Serializable
data class Token(
	@SerialName("btc_payment_address")
    var `btcPaymentAddress`: kotlin.String,
    var `fee`: kotlin.String,
	@SerialName("lightning_invoice")
    var `lightningInvoice`: kotlin.String,
	@SerialName("processor_id")
    var `processorId`: kotlin.String,
	@SerialName("token_id")
    var `tokenId`: kotlin.String,
    var `confirmed`: kotlin.Boolean,
    var `spent`: kotlin.Boolean,
    var `expiry`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeToken : FfiConverterRustBuffer<Token> {
    override fun read(buf: ByteBuffer): Token {
        return Token(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterBoolean.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: Token) =
        (
            FfiConverterString.allocationSize(value.`btcPaymentAddress`) +
                FfiConverterString.allocationSize(value.`fee`) +
                FfiConverterString.allocationSize(value.`lightningInvoice`) +
                FfiConverterString.allocationSize(value.`processorId`) +
                FfiConverterString.allocationSize(value.`tokenId`) +
                FfiConverterBoolean.allocationSize(value.`confirmed`) +
                FfiConverterBoolean.allocationSize(value.`spent`) +
                FfiConverterString.allocationSize(value.`expiry`)
        )

    override fun write(
        value: Token,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`btcPaymentAddress`, buf)
        FfiConverterString.write(value.`fee`, buf)
        FfiConverterString.write(value.`lightningInvoice`, buf)
        FfiConverterString.write(value.`processorId`, buf)
        FfiConverterString.write(value.`tokenId`, buf)
        FfiConverterBoolean.write(value.`confirmed`, buf)
        FfiConverterBoolean.write(value.`spent`, buf)
        FfiConverterString.write(value.`expiry`, buf)
    }
}

@Serializable
data class TransferReceiverErrorResponsePayload(
    var `code`: TransferReceiverError,
    var `message`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeTransferReceiverErrorResponsePayload : FfiConverterRustBuffer<TransferReceiverErrorResponsePayload> {
    override fun read(buf: ByteBuffer): TransferReceiverErrorResponsePayload {
        return TransferReceiverErrorResponsePayload(
            FfiConverterTypeTransferReceiverError.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TransferReceiverErrorResponsePayload) =
        (
            FfiConverterTypeTransferReceiverError.allocationSize(value.`code`) +
                FfiConverterString.allocationSize(value.`message`)
        )

    override fun write(
        value: TransferReceiverErrorResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterTypeTransferReceiverError.write(value.`code`, buf)
        FfiConverterString.write(value.`message`, buf)
    }
}

@Serializable
data class TransferReceiverPostResponsePayload(
	@SerialName("server_pubkey")
    var `serverPubkey`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeTransferReceiverPostResponsePayload : FfiConverterRustBuffer<TransferReceiverPostResponsePayload> {
    override fun read(buf: ByteBuffer): TransferReceiverPostResponsePayload {
        return TransferReceiverPostResponsePayload(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TransferReceiverPostResponsePayload) =
        (
            FfiConverterString.allocationSize(value.`serverPubkey`)
        )

    override fun write(
        value: TransferReceiverPostResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`serverPubkey`, buf)
    }
}

@Serializable
data class TransferReceiverRequestPayload(
	@SerialName("statechain_id")
    var `statechainId`: kotlin.String,
	@SerialName("batch_data")
    var `batchData`: kotlin.String?,
    var `t2`: kotlin.String,
	@SerialName("auth_sig")
    var `authSig`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeTransferReceiverRequestPayload : FfiConverterRustBuffer<TransferReceiverRequestPayload> {
    override fun read(buf: ByteBuffer): TransferReceiverRequestPayload {
        return TransferReceiverRequestPayload(
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TransferReceiverRequestPayload) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterOptionalString.allocationSize(value.`batchData`) +
                FfiConverterString.allocationSize(value.`t2`) +
                FfiConverterString.allocationSize(value.`authSig`)
        )

    override fun write(
        value: TransferReceiverRequestPayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterOptionalString.write(value.`batchData`, buf)
        FfiConverterString.write(value.`t2`, buf)
        FfiConverterString.write(value.`authSig`, buf)
    }
}

@Serializable
data class TransferSenderRequestPayload(
	@SerialName("statechain_id")
    var `statechainId`: kotlin.String,
	@SerialName("auth_sig")
    var `authSig`: kotlin.String,
	@SerialName("new_user_auth_key")
    var `newUserAuthKey`: kotlin.String,
	@SerialName("batch_id")
    var `batchId`: kotlin.String?,
) {
    companion object
}

public object FfiConverterTypeTransferSenderRequestPayload : FfiConverterRustBuffer<TransferSenderRequestPayload> {
    override fun read(buf: ByteBuffer): TransferSenderRequestPayload {
        return TransferSenderRequestPayload(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterOptionalString.read(buf),
        )
    }

    override fun allocationSize(value: TransferSenderRequestPayload) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterString.allocationSize(value.`authSig`) +
                FfiConverterString.allocationSize(value.`newUserAuthKey`) +
                FfiConverterOptionalString.allocationSize(value.`batchId`)
        )

    override fun write(
        value: TransferSenderRequestPayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterString.write(value.`authSig`, buf)
        FfiConverterString.write(value.`newUserAuthKey`, buf)
        FfiConverterOptionalString.write(value.`batchId`, buf)
    }
}

@Serializable
data class TransferSenderResponsePayload(
    var `x1`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeTransferSenderResponsePayload : FfiConverterRustBuffer<TransferSenderResponsePayload> {
    override fun read(buf: ByteBuffer): TransferSenderResponsePayload {
        return TransferSenderResponsePayload(
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TransferSenderResponsePayload) =
        (
            FfiConverterString.allocationSize(value.`x1`)
        )

    override fun write(
        value: TransferSenderResponsePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`x1`, buf)
    }
}

@Serializable
data class TransferUnlockRequestPayload(
	@SerialName("statechain_id")
    var `statechainId`: kotlin.String,
	@SerialName("auth_sig")
    var `authSig`: kotlin.String,
	@SerialName("auth_pub_key")
    var `authPubKey`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeTransferUnlockRequestPayload : FfiConverterRustBuffer<TransferUnlockRequestPayload> {
    override fun read(buf: ByteBuffer): TransferUnlockRequestPayload {
        return TransferUnlockRequestPayload(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TransferUnlockRequestPayload) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterString.allocationSize(value.`authSig`) +
                FfiConverterString.allocationSize(value.`authPubKey`)
        )

    override fun write(
        value: TransferUnlockRequestPayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterString.write(value.`authSig`, buf)
        FfiConverterString.write(value.`authPubKey`, buf)
    }
}

@Serializable
data class TransferUpdateMsgRequestPayload(
	@SerialName("statechain_id")
    var `statechainId`: kotlin.String,
	@SerialName("auth_sig")
    var `authSig`: kotlin.String,
	@SerialName("new_user_auth_key")
    var `newUserAuthKey`: kotlin.String,
	@SerialName("enc_transfer_msg")
    var `encTransferMsg`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeTransferUpdateMsgRequestPayload : FfiConverterRustBuffer<TransferUpdateMsgRequestPayload> {
    override fun read(buf: ByteBuffer): TransferUpdateMsgRequestPayload {
        return TransferUpdateMsgRequestPayload(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: TransferUpdateMsgRequestPayload) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterString.allocationSize(value.`authSig`) +
                FfiConverterString.allocationSize(value.`newUserAuthKey`) +
                FfiConverterString.allocationSize(value.`encTransferMsg`)
        )

    override fun write(
        value: TransferUpdateMsgRequestPayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterString.write(value.`authSig`, buf)
        FfiConverterString.write(value.`newUserAuthKey`, buf)
        FfiConverterString.write(value.`encTransferMsg`, buf)
    }
}

data class TxOutpoint(
    var `txid`: kotlin.String,
    var `vout`: kotlin.UInt,
) {
    companion object
}

public object FfiConverterTypeTxOutpoint : FfiConverterRustBuffer<TxOutpoint> {
    override fun read(buf: ByteBuffer): TxOutpoint {
        return TxOutpoint(
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
        )
    }

    override fun allocationSize(value: TxOutpoint) =
        (
            FfiConverterString.allocationSize(value.`txid`) +
                FfiConverterUInt.allocationSize(value.`vout`)
        )

    override fun write(
        value: TxOutpoint,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`txid`, buf)
        FfiConverterUInt.write(value.`vout`, buf)
    }
}

@Serializable
data class Wallet(
    var `name`: kotlin.String,
    var `mnemonic`: kotlin.String,
    var `version`: kotlin.String,
    var `stateEntityEndpoint`: kotlin.String,
    var `electrumEndpoint`: kotlin.String,
    var `network`: kotlin.String,
    var `blockheight`: kotlin.UInt,
    var `initlock`: kotlin.UInt,
    var `interval`: kotlin.UInt,
    var `tokens`: List<Token>,
    var `activities`: List<Activity>,
    var `coins`: List<Coin>,
    var `settings`: Settings,
) {
    companion object
}

public object FfiConverterTypeWallet : FfiConverterRustBuffer<Wallet> {
    override fun read(buf: ByteBuffer): Wallet {
        return Wallet(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterUInt.read(buf),
            FfiConverterSequenceTypeToken.read(buf),
            FfiConverterSequenceTypeActivity.read(buf),
            FfiConverterSequenceTypeCoin.read(buf),
            FfiConverterTypeSettings.read(buf),
        )
    }

    override fun allocationSize(value: Wallet) =
        (
            FfiConverterString.allocationSize(value.`name`) +
                FfiConverterString.allocationSize(value.`mnemonic`) +
                FfiConverterString.allocationSize(value.`version`) +
                FfiConverterString.allocationSize(value.`stateEntityEndpoint`) +
                FfiConverterString.allocationSize(value.`electrumEndpoint`) +
                FfiConverterString.allocationSize(value.`network`) +
                FfiConverterUInt.allocationSize(value.`blockheight`) +
                FfiConverterUInt.allocationSize(value.`initlock`) +
                FfiConverterUInt.allocationSize(value.`interval`) +
                FfiConverterSequenceTypeToken.allocationSize(value.`tokens`) +
                FfiConverterSequenceTypeActivity.allocationSize(value.`activities`) +
                FfiConverterSequenceTypeCoin.allocationSize(value.`coins`) +
                FfiConverterTypeSettings.allocationSize(value.`settings`)
        )

    override fun write(
        value: Wallet,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`name`, buf)
        FfiConverterString.write(value.`mnemonic`, buf)
        FfiConverterString.write(value.`version`, buf)
        FfiConverterString.write(value.`stateEntityEndpoint`, buf)
        FfiConverterString.write(value.`electrumEndpoint`, buf)
        FfiConverterString.write(value.`network`, buf)
        FfiConverterUInt.write(value.`blockheight`, buf)
        FfiConverterUInt.write(value.`initlock`, buf)
        FfiConverterUInt.write(value.`interval`, buf)
        FfiConverterSequenceTypeToken.write(value.`tokens`, buf)
        FfiConverterSequenceTypeActivity.write(value.`activities`, buf)
        FfiConverterSequenceTypeCoin.write(value.`coins`, buf)
        FfiConverterTypeSettings.write(value.`settings`, buf)
    }
}

@Serializable
data class WithdrawCompletePayload(
	@SerialName("statechain_id")
    var `statechainId`: kotlin.String,
	@SerialName("signed_statechain_id")
    var `signedStatechainId`: kotlin.String,
) {
    companion object
}

public object FfiConverterTypeWithdrawCompletePayload : FfiConverterRustBuffer<WithdrawCompletePayload> {
    override fun read(buf: ByteBuffer): WithdrawCompletePayload {
        return WithdrawCompletePayload(
            FfiConverterString.read(buf),
            FfiConverterString.read(buf),
        )
    }

    override fun allocationSize(value: WithdrawCompletePayload) =
        (
            FfiConverterString.allocationSize(value.`statechainId`) +
                FfiConverterString.allocationSize(value.`signedStatechainId`)
        )

    override fun write(
        value: WithdrawCompletePayload,
        buf: ByteBuffer,
    ) {
        FfiConverterString.write(value.`statechainId`, buf)
        FfiConverterString.write(value.`signedStatechainId`, buf)
    }
}

enum class CoinStatus {
    INITIALISED,
    IN_MEMPOOL,
    UNCONFIRMED,
    CONFIRMED,
    IN_TRANSFER,
    WITHDRAWING,
    TRANSFERRED,
    WITHDRAWN,
    ;

    companion object
}

public object FfiConverterTypeCoinStatus : FfiConverterRustBuffer<CoinStatus> {
    override fun read(buf: ByteBuffer) =
        try {
            CoinStatus.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: CoinStatus) = 4UL

    override fun write(
        value: CoinStatus,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

sealed class MercuryException : Exception() {
    class Bip39Exception() : MercuryException() {
        override val message
            get() = ""
    }

    class Bip32Exception() : MercuryException() {
        override val message
            get() = ""
    }

    class NetworkConversionException() : MercuryException() {
        override val message
            get() = ""
    }

    class Secp256k1UpstreamException() : MercuryException() {
        override val message
            get() = ""
    }

    class KeyException() : MercuryException() {
        override val message
            get() = ""
    }

    class Bech32Exception() : MercuryException() {
        override val message
            get() = ""
    }

    class HexException() : MercuryException() {
        override val message
            get() = ""
    }

    class LocktimeNotBlockHeightException() : MercuryException() {
        override val message
            get() = ""
    }

    class BitcoinConsensusEncodeException() : MercuryException() {
        override val message
            get() = ""
    }

    class MusigNonceGenException() : MercuryException() {
        override val message
            get() = ""
    }

    class InvalidStatechainAddressException() : MercuryException() {
        override val message
            get() = ""
    }

    class InvalidBitcoinAddressException() : MercuryException() {
        override val message
            get() = ""
    }

    class StatechainAddressMismatchNetworkException() : MercuryException() {
        override val message
            get() = ""
    }

    class BitcoinAddressMismatchNetworkException() : MercuryException() {
        override val message
            get() = ""
    }

    class BitcoinAddressException() : MercuryException() {
        override val message
            get() = ""
    }

    class BitcoinAbsoluteException() : MercuryException() {
        override val message
            get() = ""
    }

    class BitcoinHashHexException() : MercuryException() {
        override val message
            get() = ""
    }

    class BitcoinPsbtException() : MercuryException() {
        override val message
            get() = ""
    }

    class SighashTypeParseException() : MercuryException() {
        override val message
            get() = ""
    }

    class BitcoinSighashException() : MercuryException() {
        override val message
            get() = ""
    }

    class ParseException() : MercuryException() {
        override val message
            get() = ""
    }

    class MusigSignException() : MercuryException() {
        override val message
            get() = ""
    }

    class SchnorrSignatureValidationException() : MercuryException() {
        override val message
            get() = ""
    }

    class MoreThanOneInputException() : MercuryException() {
        override val message
            get() = ""
    }

    class UnkownNetwork() : MercuryException() {
        override val message
            get() = ""
    }

    class BackupTransactionDoesNotPayUser() : MercuryException() {
        override val message
            get() = ""
    }

    class FeeTooHigh() : MercuryException() {
        override val message
            get() = ""
    }

    class FeeTooLow() : MercuryException() {
        override val message
            get() = ""
    }

    class OutOfRangeException() : MercuryException() {
        override val message
            get() = ""
    }

    class SerdeJsonException() : MercuryException() {
        override val message
            get() = ""
    }

    class SecpException() : MercuryException() {
        override val message
            get() = ""
    }

    class NoBackupTransactionFound() : MercuryException() {
        override val message
            get() = ""
    }

    class Tx1HasMoreThanOneInput() : MercuryException() {
        override val message
            get() = ""
    }

    class InvalidSignature() : MercuryException() {
        override val message
            get() = ""
    }

    class EmptyWitness() : MercuryException() {
        override val message
            get() = ""
    }

    class EmptyWitnessData() : MercuryException() {
        override val message
            get() = ""
    }

    class IncorrectChallenge() : MercuryException() {
        override val message
            get() = ""
    }

    class InvalidT1() : MercuryException() {
        override val message
            get() = ""
    }

    class IncorrectAggregatedPublicKey() : MercuryException() {
        override val message
            get() = ""
    }

    class T1MustBeExactly32BytesException() : MercuryException() {
        override val message
            get() = ""
    }

    class NoX1Pub() : MercuryException() {
        override val message
            get() = ""
    }

    class NoAggregatedPubkeyException() : MercuryException() {
        override val message
            get() = ""
    }

    class CoinNotFound() : MercuryException() {
        override val message
            get() = ""
    }

    companion object ErrorHandler : UniffiRustCallStatusErrorHandler<MercuryException> {
        override fun lift(error_buf: RustBuffer.ByValue): MercuryException = FfiConverterTypeMercuryError.lift(error_buf)
    }
}

public object FfiConverterTypeMercuryError : FfiConverterRustBuffer<MercuryException> {
    override fun read(buf: ByteBuffer): MercuryException {
        return when (buf.getInt()) {
            1 -> MercuryException.Bip39Exception()
            2 -> MercuryException.Bip32Exception()
            3 -> MercuryException.NetworkConversionException()
            4 -> MercuryException.Secp256k1UpstreamException()
            5 -> MercuryException.KeyException()
            6 -> MercuryException.Bech32Exception()
            7 -> MercuryException.HexException()
            8 -> MercuryException.LocktimeNotBlockHeightException()
            9 -> MercuryException.BitcoinConsensusEncodeException()
            10 -> MercuryException.MusigNonceGenException()
            11 -> MercuryException.InvalidStatechainAddressException()
            12 -> MercuryException.InvalidBitcoinAddressException()
            13 -> MercuryException.StatechainAddressMismatchNetworkException()
            14 -> MercuryException.BitcoinAddressMismatchNetworkException()
            15 -> MercuryException.BitcoinAddressException()
            16 -> MercuryException.BitcoinAbsoluteException()
            17 -> MercuryException.BitcoinHashHexException()
            18 -> MercuryException.BitcoinPsbtException()
            19 -> MercuryException.SighashTypeParseException()
            20 -> MercuryException.BitcoinSighashException()
            21 -> MercuryException.ParseException()
            22 -> MercuryException.MusigSignException()
            23 -> MercuryException.SchnorrSignatureValidationException()
            24 -> MercuryException.MoreThanOneInputException()
            25 -> MercuryException.UnkownNetwork()
            26 -> MercuryException.BackupTransactionDoesNotPayUser()
            27 -> MercuryException.FeeTooHigh()
            28 -> MercuryException.FeeTooLow()
            29 -> MercuryException.OutOfRangeException()
            30 -> MercuryException.SerdeJsonException()
            31 -> MercuryException.SecpException()
            32 -> MercuryException.NoBackupTransactionFound()
            33 -> MercuryException.Tx1HasMoreThanOneInput()
            34 -> MercuryException.InvalidSignature()
            35 -> MercuryException.EmptyWitness()
            36 -> MercuryException.EmptyWitnessData()
            37 -> MercuryException.IncorrectChallenge()
            38 -> MercuryException.InvalidT1()
            39 -> MercuryException.IncorrectAggregatedPublicKey()
            40 -> MercuryException.T1MustBeExactly32BytesException()
            41 -> MercuryException.NoX1Pub()
            42 -> MercuryException.NoAggregatedPubkeyException()
            43 -> MercuryException.CoinNotFound()
            else -> throw RuntimeException("invalid error enum value, something is very wrong!!")
        }
    }

    override fun allocationSize(value: MercuryException): ULong {
        return when (value) {
            is MercuryException.Bip39Exception -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.Bip32Exception -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.NetworkConversionException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.Secp256k1UpstreamException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.KeyException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.Bech32Exception -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.HexException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.LocktimeNotBlockHeightException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.BitcoinConsensusEncodeException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.MusigNonceGenException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.InvalidStatechainAddressException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.InvalidBitcoinAddressException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.StatechainAddressMismatchNetworkException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.BitcoinAddressMismatchNetworkException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.BitcoinAddressException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.BitcoinAbsoluteException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.BitcoinHashHexException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.BitcoinPsbtException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.SighashTypeParseException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.BitcoinSighashException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.ParseException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.MusigSignException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.SchnorrSignatureValidationException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.MoreThanOneInputException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.UnkownNetwork -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.BackupTransactionDoesNotPayUser -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.FeeTooHigh -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.FeeTooLow -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.OutOfRangeException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.SerdeJsonException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.SecpException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.NoBackupTransactionFound -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.Tx1HasMoreThanOneInput -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.InvalidSignature -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.EmptyWitness -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.EmptyWitnessData -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.IncorrectChallenge -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.InvalidT1 -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.IncorrectAggregatedPublicKey -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.T1MustBeExactly32BytesException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.NoX1Pub -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.NoAggregatedPubkeyException -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
            is MercuryException.CoinNotFound -> (
                // Add the size for the Int that specifies the variant plus the size needed for all fields
                4UL
            )
        }
    }

    override fun write(
        value: MercuryException,
        buf: ByteBuffer,
    ) {
        when (value) {
            is MercuryException.Bip39Exception -> {
                buf.putInt(1)
                Unit
            }
            is MercuryException.Bip32Exception -> {
                buf.putInt(2)
                Unit
            }
            is MercuryException.NetworkConversionException -> {
                buf.putInt(3)
                Unit
            }
            is MercuryException.Secp256k1UpstreamException -> {
                buf.putInt(4)
                Unit
            }
            is MercuryException.KeyException -> {
                buf.putInt(5)
                Unit
            }
            is MercuryException.Bech32Exception -> {
                buf.putInt(6)
                Unit
            }
            is MercuryException.HexException -> {
                buf.putInt(7)
                Unit
            }
            is MercuryException.LocktimeNotBlockHeightException -> {
                buf.putInt(8)
                Unit
            }
            is MercuryException.BitcoinConsensusEncodeException -> {
                buf.putInt(9)
                Unit
            }
            is MercuryException.MusigNonceGenException -> {
                buf.putInt(10)
                Unit
            }
            is MercuryException.InvalidStatechainAddressException -> {
                buf.putInt(11)
                Unit
            }
            is MercuryException.InvalidBitcoinAddressException -> {
                buf.putInt(12)
                Unit
            }
            is MercuryException.StatechainAddressMismatchNetworkException -> {
                buf.putInt(13)
                Unit
            }
            is MercuryException.BitcoinAddressMismatchNetworkException -> {
                buf.putInt(14)
                Unit
            }
            is MercuryException.BitcoinAddressException -> {
                buf.putInt(15)
                Unit
            }
            is MercuryException.BitcoinAbsoluteException -> {
                buf.putInt(16)
                Unit
            }
            is MercuryException.BitcoinHashHexException -> {
                buf.putInt(17)
                Unit
            }
            is MercuryException.BitcoinPsbtException -> {
                buf.putInt(18)
                Unit
            }
            is MercuryException.SighashTypeParseException -> {
                buf.putInt(19)
                Unit
            }
            is MercuryException.BitcoinSighashException -> {
                buf.putInt(20)
                Unit
            }
            is MercuryException.ParseException -> {
                buf.putInt(21)
                Unit
            }
            is MercuryException.MusigSignException -> {
                buf.putInt(22)
                Unit
            }
            is MercuryException.SchnorrSignatureValidationException -> {
                buf.putInt(23)
                Unit
            }
            is MercuryException.MoreThanOneInputException -> {
                buf.putInt(24)
                Unit
            }
            is MercuryException.UnkownNetwork -> {
                buf.putInt(25)
                Unit
            }
            is MercuryException.BackupTransactionDoesNotPayUser -> {
                buf.putInt(26)
                Unit
            }
            is MercuryException.FeeTooHigh -> {
                buf.putInt(27)
                Unit
            }
            is MercuryException.FeeTooLow -> {
                buf.putInt(28)
                Unit
            }
            is MercuryException.OutOfRangeException -> {
                buf.putInt(29)
                Unit
            }
            is MercuryException.SerdeJsonException -> {
                buf.putInt(30)
                Unit
            }
            is MercuryException.SecpException -> {
                buf.putInt(31)
                Unit
            }
            is MercuryException.NoBackupTransactionFound -> {
                buf.putInt(32)
                Unit
            }
            is MercuryException.Tx1HasMoreThanOneInput -> {
                buf.putInt(33)
                Unit
            }
            is MercuryException.InvalidSignature -> {
                buf.putInt(34)
                Unit
            }
            is MercuryException.EmptyWitness -> {
                buf.putInt(35)
                Unit
            }
            is MercuryException.EmptyWitnessData -> {
                buf.putInt(36)
                Unit
            }
            is MercuryException.IncorrectChallenge -> {
                buf.putInt(37)
                Unit
            }
            is MercuryException.InvalidT1 -> {
                buf.putInt(38)
                Unit
            }
            is MercuryException.IncorrectAggregatedPublicKey -> {
                buf.putInt(39)
                Unit
            }
            is MercuryException.T1MustBeExactly32BytesException -> {
                buf.putInt(40)
                Unit
            }
            is MercuryException.NoX1Pub -> {
                buf.putInt(41)
                Unit
            }
            is MercuryException.NoAggregatedPubkeyException -> {
                buf.putInt(42)
                Unit
            }
            is MercuryException.CoinNotFound -> {
                buf.putInt(43)
                Unit
            }
        }.let { /* this makes the `when` an expression, which ensures it is exhaustive */ }
    }
}

@Serializable
enum class TransferReceiverError {
	@SerialName("StatecoinBatchLockedError")
    STATECOIN_BATCH_LOCKED_ERROR,
	@SerialName("ExpiredBatchTimeError")
    EXPIRED_BATCH_TIME_ERROR,
    ;

    companion object
}

public object FfiConverterTypeTransferReceiverError : FfiConverterRustBuffer<TransferReceiverError> {
    override fun read(buf: ByteBuffer) =
        try {
            TransferReceiverError.values()[buf.getInt() - 1]
        } catch (e: IndexOutOfBoundsException) {
            throw RuntimeException("invalid enum value, something is very wrong!!", e)
        }

    override fun allocationSize(value: TransferReceiverError) = 4UL

    override fun write(
        value: TransferReceiverError,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.ordinal + 1)
    }
}

public object FfiConverterOptionalUInt : FfiConverterRustBuffer<kotlin.UInt?> {
    override fun read(buf: ByteBuffer): kotlin.UInt? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterUInt.read(buf)
    }

    override fun allocationSize(value: kotlin.UInt?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterUInt.allocationSize(value)
        }
    }

    override fun write(
        value: kotlin.UInt?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterUInt.write(value, buf)
        }
    }
}

public object FfiConverterOptionalString : FfiConverterRustBuffer<kotlin.String?> {
    override fun read(buf: ByteBuffer): kotlin.String? {
        if (buf.get().toInt() == 0) {
            return null
        }
        return FfiConverterString.read(buf)
    }

    override fun allocationSize(value: kotlin.String?): ULong {
        if (value == null) {
            return 1UL
        } else {
            return 1UL + FfiConverterString.allocationSize(value)
        }
    }

    override fun write(
        value: kotlin.String?,
        buf: ByteBuffer,
    ) {
        if (value == null) {
            buf.put(0)
        } else {
            buf.put(1)
            FfiConverterString.write(value, buf)
        }
    }
}

public object FfiConverterSequenceString : FfiConverterRustBuffer<List<kotlin.String>> {
    override fun read(buf: ByteBuffer): List<kotlin.String> {
        val len = buf.getInt()
        return List<kotlin.String>(len) {
            FfiConverterString.read(buf)
        }
    }

    override fun allocationSize(value: List<kotlin.String>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterString.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<kotlin.String>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterString.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeActivity : FfiConverterRustBuffer<List<Activity>> {
    override fun read(buf: ByteBuffer): List<Activity> {
        val len = buf.getInt()
        return List<Activity>(len) {
            FfiConverterTypeActivity.read(buf)
        }
    }

    override fun allocationSize(value: List<Activity>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeActivity.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<Activity>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeActivity.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeBackupTx : FfiConverterRustBuffer<List<BackupTx>> {
    override fun read(buf: ByteBuffer): List<BackupTx> {
        val len = buf.getInt()
        return List<BackupTx>(len) {
            FfiConverterTypeBackupTx.read(buf)
        }
    }

    override fun allocationSize(value: List<BackupTx>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeBackupTx.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<BackupTx>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeBackupTx.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeCoin : FfiConverterRustBuffer<List<Coin>> {
    override fun read(buf: ByteBuffer): List<Coin> {
        val len = buf.getInt()
        return List<Coin>(len) {
            FfiConverterTypeCoin.read(buf)
        }
    }

    override fun allocationSize(value: List<Coin>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeCoin.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<Coin>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeCoin.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypePubKeyInfo : FfiConverterRustBuffer<List<PubKeyInfo>> {
    override fun read(buf: ByteBuffer): List<PubKeyInfo> {
        val len = buf.getInt()
        return List<PubKeyInfo>(len) {
            FfiConverterTypePubKeyInfo.read(buf)
        }
    }

    override fun allocationSize(value: List<PubKeyInfo>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypePubKeyInfo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<PubKeyInfo>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypePubKeyInfo.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeStatechainInfo : FfiConverterRustBuffer<List<StatechainInfo>> {
    override fun read(buf: ByteBuffer): List<StatechainInfo> {
        val len = buf.getInt()
        return List<StatechainInfo>(len) {
            FfiConverterTypeStatechainInfo.read(buf)
        }
    }

    override fun allocationSize(value: List<StatechainInfo>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeStatechainInfo.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<StatechainInfo>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeStatechainInfo.write(it, buf)
        }
    }
}

public object FfiConverterSequenceTypeToken : FfiConverterRustBuffer<List<Token>> {
    override fun read(buf: ByteBuffer): List<Token> {
        val len = buf.getInt()
        return List<Token>(len) {
            FfiConverterTypeToken.read(buf)
        }
    }

    override fun allocationSize(value: List<Token>): ULong {
        val sizeForLength = 4UL
        val sizeForItems = value.map { FfiConverterTypeToken.allocationSize(it) }.sum()
        return sizeForLength + sizeForItems
    }

    override fun write(
        value: List<Token>,
        buf: ByteBuffer,
    ) {
        buf.putInt(value.size)
        value.iterator().forEach {
            FfiConverterTypeToken.write(it, buf)
        }
    }
}

@Throws(MercuryException::class)
fun `createAggregatedAddress`(
    `coin`: Coin,
    `network`: kotlin.String,
): AggregatedPublicKey {
    return FfiConverterTypeAggregatedPublicKey.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_create_aggregated_address(
                FfiConverterTypeCoin.lower(`coin`),
                FfiConverterString.lower(`network`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `createAndCommitNonces`(`coin`: Coin): CoinNonce {
    return FfiConverterTypeCoinNonce.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_create_and_commit_nonces(
                FfiConverterTypeCoin.lower(`coin`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `createCpfpTx`(
    `backupTx`: BackupTx,
    `coin`: Coin,
    `toAddress`: kotlin.String,
    `feeRateSatsPerByte`: kotlin.ULong,
    `network`: kotlin.String,
): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_create_cpfp_tx(
                FfiConverterTypeBackupTx.lower(`backupTx`),
                FfiConverterTypeCoin.lower(`coin`),
                FfiConverterString.lower(`toAddress`),
                FfiConverterULong.lower(`feeRateSatsPerByte`),
                FfiConverterString.lower(`network`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `createDepositMsg1`(
    `coin`: Coin,
    `tokenId`: kotlin.String,
): DepositMsg1 {
    return FfiConverterTypeDepositMsg1.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_create_deposit_msg1(
                FfiConverterTypeCoin.lower(`coin`),
                FfiConverterString.lower(`tokenId`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `createSignature`(
    `msg`: kotlin.String,
    `clientPartialSigHex`: kotlin.String,
    `serverPartialSigHex`: kotlin.String,
    `sessionHex`: kotlin.String,
    `outputPubkeyHex`: kotlin.String,
): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_create_signature(
                FfiConverterString.lower(`msg`),
                FfiConverterString.lower(`clientPartialSigHex`),
                FfiConverterString.lower(`serverPartialSigHex`),
                FfiConverterString.lower(`sessionHex`),
                FfiConverterString.lower(`outputPubkeyHex`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `createTransferSignature`(
    `recipientAddress`: kotlin.String,
    `inputTxid`: kotlin.String,
    `inputVout`: kotlin.UInt,
    `clientSeckey`: kotlin.String,
): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_create_transfer_signature(
                FfiConverterString.lower(`recipientAddress`),
                FfiConverterString.lower(`inputTxid`),
                FfiConverterUInt.lower(`inputVout`),
                FfiConverterString.lower(`clientSeckey`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `createTransferUpdateMsg`(
    `x1`: kotlin.String,
    `recipientAddress`: kotlin.String,
    `coin`: Coin,
    `transferSignature`: kotlin.String,
    `backupTransactions`: List<BackupTx>,
): TransferUpdateMsgRequestPayload {
    return FfiConverterTypeTransferUpdateMsgRequestPayload.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_create_transfer_update_msg(
                FfiConverterString.lower(`x1`),
                FfiConverterString.lower(`recipientAddress`),
                FfiConverterTypeCoin.lower(`coin`),
                FfiConverterString.lower(`transferSignature`),
                FfiConverterSequenceTypeBackupTx.lower(`backupTransactions`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `decodeStatechainAddress`(`scAddress`: kotlin.String): DecodedScAddress {
    return FfiConverterTypeDecodedSCAddress.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_decode_statechain_address(
                FfiConverterString.lower(`scAddress`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `duplicateCoinToInitializedState`(
    `wallet`: Wallet,
    `authPubkey`: kotlin.String,
): Coin {
    return FfiConverterTypeCoin.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_duplicate_coin_to_initialized_state(
                FfiConverterTypeWallet.lower(`wallet`),
                FfiConverterString.lower(`authPubkey`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `ffiVerifyTransferSignature`(
    `newUserPubkey`: kotlin.String,
    `tx0Outpoint`: TxOutpoint,
    `ffiTransferMsg`: FfiTransferMsg,
): kotlin.Boolean {
    return FfiConverterBoolean.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_ffi_verify_transfer_signature(
                FfiConverterString.lower(`newUserPubkey`),
                FfiConverterTypeTxOutpoint.lower(`tx0Outpoint`),
                FfiConverterTypeFFITransferMsg.lower(`ffiTransferMsg`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `fiiCreateTransferReceiverRequestPayload`(
    `statechainInfo`: StatechainInfoResponsePayload,
    `ffiTransferMsg`: FfiTransferMsg,
    `coin`: Coin,
): TransferReceiverRequestPayload {
    return FfiConverterTypeTransferReceiverRequestPayload.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_fii_create_transfer_receiver_request_payload(
                FfiConverterTypeStatechainInfoResponsePayload.lower(`statechainInfo`),
                FfiConverterTypeFFITransferMsg.lower(`ffiTransferMsg`),
                FfiConverterTypeCoin.lower(`coin`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `fiiDecryptTransferMsg`(
    `encryptedMessage`: kotlin.String,
    `privateKeyWif`: kotlin.String,
): FfiTransferMsg {
    return FfiConverterTypeFFITransferMsg.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_fii_decrypt_transfer_msg(
                FfiConverterString.lower(`encryptedMessage`),
                FfiConverterString.lower(`privateKeyWif`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `fiiValidateTx0OutputPubkey`(
    `enclavePublicKey`: kotlin.String,
    `ffiTransferMsg`: FfiTransferMsg,
    `tx0Outpoint`: TxOutpoint,
    `tx0Hex`: kotlin.String,
    `network`: kotlin.String,
): kotlin.Boolean {
    return FfiConverterBoolean.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_fii_validate_tx0_output_pubkey(
                FfiConverterString.lower(`enclavePublicKey`),
                FfiConverterTypeFFITransferMsg.lower(`ffiTransferMsg`),
                FfiConverterTypeTxOutpoint.lower(`tx0Outpoint`),
                FfiConverterString.lower(`tx0Hex`),
                FfiConverterString.lower(`network`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `fiiVerifyLatestBackupTxPaysToUserPubkey`(
    `ffiTransferMsg`: FfiTransferMsg,
    `clientPubkeyShare`: kotlin.String,
    `network`: kotlin.String,
): kotlin.Boolean {
    return FfiConverterBoolean.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_fii_verify_latest_backup_tx_pays_to_user_pubkey(
                FfiConverterTypeFFITransferMsg.lower(`ffiTransferMsg`),
                FfiConverterString.lower(`clientPubkeyShare`),
                FfiConverterString.lower(`network`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `generateMnemonic`(): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_generate_mnemonic(
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `getBlockheight`(`bkpTx`: BackupTx): kotlin.UInt {
    return FfiConverterUInt.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_get_blockheight(
                FfiConverterTypeBackupTx.lower(`bkpTx`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `getNewCoin`(`wallet`: Wallet): Coin {
    return FfiConverterTypeCoin.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_get_new_coin(
                FfiConverterTypeWallet.lower(`wallet`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `getNewKeyInfo`(
    `serverPublicKeyHex`: kotlin.String,
    `coin`: Coin,
    `statechainId`: kotlin.String,
    `tx0Outpoint`: TxOutpoint,
    `tx0Hex`: kotlin.String,
    `network`: kotlin.String,
): NewKeyInfo {
    return FfiConverterTypeNewKeyInfo.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_get_new_key_info(
                FfiConverterString.lower(`serverPublicKeyHex`),
                FfiConverterTypeCoin.lower(`coin`),
                FfiConverterString.lower(`statechainId`),
                FfiConverterTypeTxOutpoint.lower(`tx0Outpoint`),
                FfiConverterString.lower(`tx0Hex`),
                FfiConverterString.lower(`network`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `getOutputAddressFromTx0`(
    `tx0Outpoint`: TxOutpoint,
    `tx0Hex`: kotlin.String,
    `network`: kotlin.String,
): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_get_output_address_from_tx0(
                FfiConverterTypeTxOutpoint.lower(`tx0Outpoint`),
                FfiConverterString.lower(`tx0Hex`),
                FfiConverterString.lower(`network`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `getPartialSigRequest`(
    `coin`: Coin,
    `blockHeight`: kotlin.UInt,
    `initlock`: kotlin.UInt,
    `interval`: kotlin.UInt,
    `feeRateSatsPerByte`: kotlin.UInt,
    `qtBackupTx`: kotlin.UInt,
    `toAddress`: kotlin.String,
    `network`: kotlin.String,
    `isWithdrawal`: kotlin.Boolean,
): PartialSignatureMsg1 {
    return FfiConverterTypePartialSignatureMsg1.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_get_partial_sig_request(
                FfiConverterTypeCoin.lower(`coin`),
                FfiConverterUInt.lower(`blockHeight`),
                FfiConverterUInt.lower(`initlock`),
                FfiConverterUInt.lower(`interval`),
                FfiConverterUInt.lower(`feeRateSatsPerByte`),
                FfiConverterUInt.lower(`qtBackupTx`),
                FfiConverterString.lower(`toAddress`),
                FfiConverterString.lower(`network`),
                FfiConverterBoolean.lower(`isWithdrawal`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `getTx0Outpoint`(`backupTransactions`: List<BackupTx>): TxOutpoint {
    return FfiConverterTypeTxOutpoint.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_get_tx0_outpoint(
                FfiConverterSequenceTypeBackupTx.lower(`backupTransactions`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `getUserBackupAddress`(
    `coin`: Coin,
    `network`: kotlin.String,
): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_get_user_backup_address(
                FfiConverterTypeCoin.lower(`coin`),
                FfiConverterString.lower(`network`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `handleDepositMsg1Response`(
    `coin`: Coin,
    `depositMsg1Response`: DepositMsg1Response,
): DepositInitResult {
    return FfiConverterTypeDepositInitResult.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_handle_deposit_msg_1_response(
                FfiConverterTypeCoin.lower(`coin`),
                FfiConverterTypeDepositMsg1Response.lower(`depositMsg1Response`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `isEnclavePubkeyPartOfCoin`(
    `coin`: Coin,
    `enclavePubkey`: kotlin.String,
): kotlin.Boolean {
    return FfiConverterBoolean.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_is_enclave_pubkey_part_of_coin(
                FfiConverterTypeCoin.lower(`coin`),
                FfiConverterString.lower(`enclavePubkey`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `latestBackupTxPaysToUserPubkey`(
    `backupTxs`: List<BackupTx>,
    `coin`: Coin,
    `network`: kotlin.String,
): BackupTx {
    return FfiConverterTypeBackupTx.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_latest_backup_tx_pays_to_user_pubkey(
                FfiConverterSequenceTypeBackupTx.lower(`backupTxs`),
                FfiConverterTypeCoin.lower(`coin`),
                FfiConverterString.lower(`network`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `newBackupTransaction`(
    `encodedUnsignedTx`: kotlin.String,
    `signatureHex`: kotlin.String,
): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_new_backup_transaction(
                FfiConverterString.lower(`encodedUnsignedTx`),
                FfiConverterString.lower(`signatureHex`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `signMessage`(
    `message`: kotlin.String,
    `coin`: Coin,
): kotlin.String {
    return FfiConverterString.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_sign_message(
                FfiConverterString.lower(`message`),
                FfiConverterTypeCoin.lower(`coin`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `validateAddress`(
    `address`: kotlin.String,
    `network`: kotlin.String,
): kotlin.Boolean {
    return FfiConverterBoolean.lift(
        uniffiRustCallWithError(MercuryException) { _status ->
            UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_validate_address(
                FfiConverterString.lower(`address`),
                FfiConverterString.lower(`network`),
                _status,
            )
        },
    )
}

@Throws(MercuryException::class)
fun `verifyBlindedMusigScheme`(
    `backupTx`: BackupTx,
    `tx0Hex`: kotlin.String,
    `statechainInfo`: StatechainInfo,
) = uniffiRustCallWithError(MercuryException) { _status ->
    UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_verify_blinded_musig_scheme(
        FfiConverterTypeBackupTx.lower(`backupTx`),
        FfiConverterString.lower(`tx0Hex`),
        FfiConverterTypeStatechainInfo.lower(`statechainInfo`),
        _status,
    )
}

@Throws(MercuryException::class)
fun `verifyTransactionSignature`(
    `txNHex`: kotlin.String,
    `tx0Hex`: kotlin.String,
    `feeRateTolerance`: kotlin.UInt,
    `currentFeeRateSatsPerByte`: kotlin.UInt,
) = uniffiRustCallWithError(MercuryException) { _status ->
    UniffiLib.INSTANCE.uniffi_mercurylib_fn_func_verify_transaction_signature(
        FfiConverterString.lower(`txNHex`),
        FfiConverterString.lower(`tx0Hex`),
        FfiConverterUInt.lower(`feeRateTolerance`),
        FfiConverterUInt.lower(`currentFeeRateSatsPerByte`),
        _status,
    )
}
