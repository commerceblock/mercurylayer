/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function setConfig(a: number, b: number): number;
export function setBlockheight(a: number, b: number): number;
export function addToken(a: number, b: number): number;
export function confirmToken(a: number, b: number, c: number): number;
export function getTokens(a: number): number;
export function getBalance(a: number): number;
export function getSCAddress(a: number, b: number, c: number, d: number, e: number): void;
export function generateMnemonic(a: number): void;
export function fromMnemonic(a: number, b: number, c: number, d: number): number;
export function getActivityLog(a: number): number;
export function getCoins(a: number): number;
export function getNewCoin(a: number): number;
export function createDepositMsg1(a: number, b: number, c: number): number;
export function handleDepositMsg1Response(a: number, b: number): number;
export function createAggregatedAddress(a: number, b: number, c: number): number;
export function createAndCommitNonces(a: number): number;
export function getUserBackupAddress(a: number, b: number, c: number, d: number): void;
export function getPartialSigRequest(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): number;
export function createSignature(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function newBackupTransaction(a: number, b: number, c: number, d: number, e: number): void;
export function createCpfpTx(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function createTransferSignature(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function createTransferUpdateMsg(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function decodeTransferAddress(a: number, b: number): number;
export function decryptTransferMsg(a: number, b: number, c: number, d: number): number;
export function getTx0Outpoint(a: number): number;
export function verifyTransferSignature(a: number, b: number, c: number, d: number): number;
export function validateTx0OutputPubkey(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function verifyLatestBackupTxPaysToUserPubkey(a: number, b: number, c: number, d: number, e: number): number;
export function getOutputAddressFromTx0(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function verifyTransactionSignature(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function verifyBlindedMusigScheme(a: number, b: number, c: number, d: number): number;
export function getBlockheight(a: number): number;
export function createTransferReceiverRequestPayload(a: number, b: number, c: number): number;
export function getNewKeyInfo(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): number;
export function validateAddress(a: number, b: number, c: number, d: number): number;
export function signMessage(a: number, b: number, c: number, d: number): void;
export function isEnclavePubkeyPartOfCoin(a: number, b: number, c: number): number;
export function latestBackuptxPaysToUserpubkey(a: number, b: number, c: number, d: number): number;
export function duplicateCoinToInitializedState(a: number, b: number, c: number): number;
export function validateSignatureScheme(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): number;
export function getMockWallet(): number;
export function rustsecp256k1zkp_v0_8_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1zkp_v0_8_1_default_error_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_8_1_context_create(a: number): number;
export function rustsecp256k1_v0_8_1_context_destroy(a: number): void;
export function rustsecp256k1_v0_8_1_default_illegal_callback_fn(a: number, b: number): void;
export function rustsecp256k1_v0_8_1_default_error_callback_fn(a: number, b: number): void;
export function __wbindgen_malloc(a: number, b: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number, d: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number, c: number): void;
export function __wbindgen_exn_store(a: number): void;
